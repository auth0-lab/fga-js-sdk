/**
 * JavaScript and Node.js SDK for Auth0 Fine Grained Authorization (FGA)
 *
 * API version: 0.1
 * Website: <https://fga.dev>
 * Documentation: <https://docs.fga.dev>
 * Support: <https://discord.gg/8naAwJfWN6>
 * License: [MIT](https://github.com/auth0-lab/fga-js-sdk/blob/main/LICENSE)
 *
 * NOTE: This file was auto generated by [OpenAPI Generator](https://openapi-generator.tech). DO NOT EDIT.
 */


import { AxiosInstance } from "axios";

import {
  Configuration as OpenFgaConfiguration,
  UserConfigurationParams as OpenFgaConfigurationParams,
  GetDefaultRetryParams as OpenFgaGetDefaultRetryParams,
  CredentialsMethod
} from "@openfga/sdk";

import {
  FgaInvalidEnvironmentError,
} from "./errors";

import { assertParamExists } from "./validation";

export interface RetryParams {
  maxRetry: number;
  minWaitInMs: number;
}

export function GetDefaultRetryParams(maxRetry = 3, minWaitInMs = 100) {
  return OpenFgaGetDefaultRetryParams(maxRetry, minWaitInMs);
}

export interface UserConfigurationParams {
  storeId: string;
  clientId: string;
  clientSecret: string;
  environment?: string;
  baseOptions?: any;
  retryParams?: RetryParams;
}

export interface EnvironmentConfiguration {
  apiScheme: string;
  apiHost: string;
  apiTokenIssuer: string;
  apiAudience: string;
  allowNoAuth?: boolean;
}

const environmentConfigurationString = "{\"default\":{\"apiAudience\":\"https://api.us1.fga.dev/\",\"apiTokenIssuer\":\"fga.us.auth0.com\",\"apiScheme\":\"https\",\"apiHost\":\"api.us1.fga.dev\"},\"us\":{\"apiAudience\":\"https://api.us1.fga.dev/\",\"apiTokenIssuer\":\"fga.us.auth0.com\",\"apiScheme\":\"https\",\"apiHost\":\"api.us1.fga.dev\"},\"playground\":{\"allowNoAuth\":true,\"apiAudience\":\"https://api.playground.fga.dev/\",\"apiTokenIssuer\":\"sandcastle-dev.us.auth0.com\",\"apiScheme\":\"https\",\"apiHost\":\"api.playground.fga.dev\"},\"staging\":{\"apiAudience\":\"https://api.staging.fga.dev/\",\"apiTokenIssuer\":\"sandcastle-dev.us.auth0.com\",\"apiScheme\":\"https\",\"apiHost\":\"api.staging.fga.dev\"}}";

export class Configuration extends OpenFgaConfiguration {
  /**
     * Defines the version of the SDK
     *
     * @private
     * @type {string}
     * @memberof Configuration
     */
  private static auth0SdkVersion = "0.9.0";

  /**
   * Client ID
   *
   * @type {string}
   * @memberof Configuration
   */
  private clientId?: string;
  /**
   * Client Secret
   *
   * @type {string}
   * @memberof Configuration
   */
  private clientSecret?: string;
  /**
   * API Token Issuer
   *
   * @type {string}
   * @memberof Configuration
   */
  private apiTokenIssuer?: string;
  /**
   * API Audience
   *
   * @type {string}
   * @memberof Configuration
   */
  private apiAudience?: string;

  public static environmentConfigurations = JSON.parse(environmentConfigurationString);

  constructor(params: UserConfigurationParams = {} as unknown as UserConfigurationParams, axios?: AxiosInstance) {
    super(Configuration.validateAndCastToOpenFgaParams(params), axios);
  }

  /**
   *
   * @throws {FgaInvalidEnvironmentError}
   * @param environment - Environment from user config
   * @return EnvironmentConfiguration
   */
  public static getEnvironmentConfiguration = function (environment = "default"): EnvironmentConfiguration {
    const environmentConfig = Configuration.environmentConfigurations[environment];

    if (environmentConfig) {
      return environmentConfig;
    }

    const allowedEnvs = Object.keys(Configuration.environmentConfigurations);

    throw new FgaInvalidEnvironmentError(environment, allowedEnvs);
  };

  private static validateAndCastToOpenFgaParams(params: UserConfigurationParams): OpenFgaConfigurationParams {

    const openFgaConfig: Partial<OpenFgaConfigurationParams> = {};

    assertParamExists("Configuration", "storeId", params.storeId);

    const environmentConfiguration = Configuration.getEnvironmentConfiguration(params.environment);

    if (!environmentConfiguration.allowNoAuth) {
      assertParamExists("Configuration", "clientId", params.clientId);
      assertParamExists("Configuration", "clientSecret", params.clientSecret);
    }

    openFgaConfig.apiScheme = environmentConfiguration.apiScheme;
    openFgaConfig.apiHost = environmentConfiguration.apiHost!;
    openFgaConfig.storeId = params.storeId!;

    if (params.clientId || params.clientSecret) {
      openFgaConfig.credentials = {
        method: CredentialsMethod.ClientCredentials,
        config: {
          clientId: params.clientId,
          clientSecret: params.clientSecret,
          apiTokenIssuer: environmentConfiguration.apiTokenIssuer,
          apiAudience: environmentConfiguration.apiAudience,
        }
      };
    }

    const baseOptions = params.baseOptions || {};
    baseOptions.headers = baseOptions.headers || {};

    if (typeof process === "object" && process.title === "node" && !baseOptions.headers["User-Agent"]) {
      baseOptions.headers["User-Agent"] = "auth0-fga-sdk {sdkId}/{packageVersion}".replace("{sdkId}", "js").replace("{packageVersion}", this.auth0SdkVersion);
    }

    openFgaConfig.baseOptions = baseOptions;
    openFgaConfig.retryParams = params.retryParams;

    return openFgaConfig as OpenFgaConfigurationParams;
  }
}
