/* tslint:disable */
/* eslint-disable */
/**
 * Project Sandcastle
 * Project Sandcastle is the internal codename of an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: https://discord.gg/8naAwJfWN6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

import { COLLECTION_FORMATS, BaseAPI } from './base';
import {
    DUMMY_BASE_URL,
    setBearerAuthToObject,
    setSearchParams,
    serializeDataIfNeeded,
    toPathString,
    createRequestFunction,
    RequestArgs,
    PromiseResult
} from './common';
import { assertParamExists, Configuration, RequiredError } from './configuration';

/**
 * 
 * @export
 * @interface AuthzmodelAuthzModel
 */
export interface AuthzmodelAuthzModel {
    /**
     * 
     * @type {string}
     * @memberof AuthzmodelAuthzModel
     */
    id?: string;
    /**
     * 
     * @type {AuthzmodelTypeDefinitions}
     * @memberof AuthzmodelAuthzModel
     */
    type_definitions?: AuthzmodelTypeDefinitions;
}
/**
 * 
 * @export
 * @interface AuthzmodelDifference
 */
export interface AuthzmodelDifference {
    /**
     * 
     * @type {AuthzmodelUserset}
     * @memberof AuthzmodelDifference
     */
    base: AuthzmodelUserset;
    /**
     * 
     * @type {AuthzmodelUserset}
     * @memberof AuthzmodelDifference
     */
    subtract: AuthzmodelUserset;
}
/**
 * 
 * @export
 * @interface AuthzmodelObjectRelation
 */
export interface AuthzmodelObjectRelation {
    /**
     * 
     * @type {string}
     * @memberof AuthzmodelObjectRelation
     */
    object?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthzmodelObjectRelation
     */
    relation?: string;
}
/**
 * 
 * @export
 * @interface AuthzmodelTupleToUserset
 */
export interface AuthzmodelTupleToUserset {
    /**
     * 
     * @type {AuthzmodelObjectRelation}
     * @memberof AuthzmodelTupleToUserset
     */
    tupleset?: AuthzmodelObjectRelation;
    /**
     * 
     * @type {AuthzmodelObjectRelation}
     * @memberof AuthzmodelTupleToUserset
     */
    computedUserset?: AuthzmodelObjectRelation;
}
/**
 * 
 * @export
 * @interface AuthzmodelTypeDefinition
 */
export interface AuthzmodelTypeDefinition {
    /**
     * 
     * @type {string}
     * @memberof AuthzmodelTypeDefinition
     */
    type: string;
    /**
     * 
     * @type {{ [key: string]: AuthzmodelUserset; }}
     * @memberof AuthzmodelTypeDefinition
     */
    relations: { [key: string]: AuthzmodelUserset; };
}
/**
 * 
 * @export
 * @interface AuthzmodelTypeDefinitions
 */
export interface AuthzmodelTypeDefinitions {
    /**
     * 
     * @type {Array<AuthzmodelTypeDefinition>}
     * @memberof AuthzmodelTypeDefinitions
     */
    type_definitions?: Array<AuthzmodelTypeDefinition>;
}
/**
 * 
 * @export
 * @interface AuthzmodelUserset
 */
export interface AuthzmodelUserset {
    /**
     * A DirectUserset is a sentinel message for referencing the direct members specified by an object/relation mapping.
     * @type {object}
     * @memberof AuthzmodelUserset
     */
    _this?: object;
    /**
     * 
     * @type {AuthzmodelObjectRelation}
     * @memberof AuthzmodelUserset
     */
    computedUserset?: AuthzmodelObjectRelation;
    /**
     * 
     * @type {AuthzmodelTupleToUserset}
     * @memberof AuthzmodelUserset
     */
    tupleToUserset?: AuthzmodelTupleToUserset;
    /**
     * 
     * @type {AuthzmodelUsersets}
     * @memberof AuthzmodelUserset
     */
    union?: AuthzmodelUsersets;
    /**
     * 
     * @type {AuthzmodelUsersets}
     * @memberof AuthzmodelUserset
     */
    intersection?: AuthzmodelUsersets;
    /**
     * 
     * @type {AuthzmodelDifference}
     * @memberof AuthzmodelUserset
     */
    difference?: AuthzmodelDifference;
}
/**
 * 
 * @export
 * @interface AuthzmodelUsersets
 */
export interface AuthzmodelUsersets {
    /**
     * 
     * @type {Array<AuthzmodelUserset>}
     * @memberof AuthzmodelUsersets
     */
    child?: Array<AuthzmodelUserset>;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    typeUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    message?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    details?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface SandcastleCheckRequestParams
 */
export interface SandcastleCheckRequestParams {
    /**
     * 
     * @type {SandcastleTupleKey}
     * @memberof SandcastleCheckRequestParams
     */
    tuple_key?: SandcastleTupleKey;
    /**
     * 
     * @type {string}
     * @memberof SandcastleCheckRequestParams
     */
    authorization_model_id?: string;
    /**
     * defaults to false. making it true has performance implications. only use for debugging purposes, etc.
     * @type {boolean}
     * @memberof SandcastleCheckRequestParams
     */
    trace?: boolean;
}
/**
 * 
 * @export
 * @interface SandcastleCheckResponse
 */
export interface SandcastleCheckResponse {
    /**
     * 
     * @type {boolean}
     * @memberof SandcastleCheckResponse
     */
    allowed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SandcastleCheckResponse
     */
    resolution?: string;
}
/**
 * 
 * @export
 * @interface SandcastleExpandRequestParams
 */
export interface SandcastleExpandRequestParams {
    /**
     * 
     * @type {SandcastleTupleKey}
     * @memberof SandcastleExpandRequestParams
     */
    tuple_key?: SandcastleTupleKey;
    /**
     * 
     * @type {string}
     * @memberof SandcastleExpandRequestParams
     */
    authorization_model_id?: string;
}
/**
 * 
 * @export
 * @interface SandcastleExpandResponse
 */
export interface SandcastleExpandResponse {
    /**
     * 
     * @type {SandcastleUsersetTree}
     * @memberof SandcastleExpandResponse
     */
    tree?: SandcastleUsersetTree;
}
/**
 * 
 * @export
 * @interface SandcastleReadAuthzModelResponse
 */
export interface SandcastleReadAuthzModelResponse {
    /**
     * 
     * @type {AuthzmodelAuthzModel}
     * @memberof SandcastleReadAuthzModelResponse
     */
    authorization_model?: AuthzmodelAuthzModel;
}
/**
 * 
 * @export
 * @interface SandcastleReadAuthzModelsResponse
 */
export interface SandcastleReadAuthzModelsResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof SandcastleReadAuthzModelsResponse
     */
    authorization_model_ids?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SandcastleReadAuthzModelsResponse
     */
    continuation_token?: string;
}
/**
 * 
 * @export
 * @interface SandcastleReadRequestParams
 */
export interface SandcastleReadRequestParams {
    /**
     * 
     * @type {SandcastleTupleKey}
     * @memberof SandcastleReadRequestParams
     */
    tuple_key?: SandcastleTupleKey;
    /**
     * 
     * @type {string}
     * @memberof SandcastleReadRequestParams
     */
    authorization_model_id?: string;
}
/**
 * 
 * @export
 * @interface SandcastleReadResponse
 */
export interface SandcastleReadResponse {
    /**
     * 
     * @type {Array<SandcastleTuple>}
     * @memberof SandcastleReadResponse
     */
    tuples?: Array<SandcastleTuple>;
}
/**
 * 
 * @export
 * @interface SandcastleTuple
 */
export interface SandcastleTuple {
    /**
     * 
     * @type {SandcastleTupleKey}
     * @memberof SandcastleTuple
     */
    key?: SandcastleTupleKey;
    /**
     * 
     * @type {string}
     * @memberof SandcastleTuple
     */
    timestamp?: string;
}
/**
 * 
 * @export
 * @interface SandcastleTupleKey
 */
export interface SandcastleTupleKey {
    /**
     * 
     * @type {string}
     * @memberof SandcastleTupleKey
     */
    object?: string;
    /**
     * 
     * @type {string}
     * @memberof SandcastleTupleKey
     */
    relation?: string;
    /**
     * 
     * @type {string}
     * @memberof SandcastleTupleKey
     */
    user?: string;
}
/**
 * 
 * @export
 * @interface SandcastleTupleKeys
 */
export interface SandcastleTupleKeys {
    /**
     * 
     * @type {Array<SandcastleTupleKey>}
     * @memberof SandcastleTupleKeys
     */
    tuple_keys: Array<SandcastleTupleKey>;
}
/**
 * A UsersetTree contains the result of an Expansion.
 * @export
 * @interface SandcastleUsersetTree
 */
export interface SandcastleUsersetTree {
    /**
     * 
     * @type {UsersetTreeNode}
     * @memberof SandcastleUsersetTree
     */
    root?: UsersetTreeNode;
}
/**
 * 
 * @export
 * @interface SandcastleUsersetTreeDifference
 */
export interface SandcastleUsersetTreeDifference {
    /**
     * 
     * @type {UsersetTreeNode}
     * @memberof SandcastleUsersetTreeDifference
     */
    base?: UsersetTreeNode;
    /**
     * 
     * @type {UsersetTreeNode}
     * @memberof SandcastleUsersetTreeDifference
     */
    subtract?: UsersetTreeNode;
}
/**
 * 
 * @export
 * @interface SandcastleUsersetTreeTupleToUserset
 */
export interface SandcastleUsersetTreeTupleToUserset {
    /**
     * 
     * @type {string}
     * @memberof SandcastleUsersetTreeTupleToUserset
     */
    tupleset?: string;
    /**
     * 
     * @type {Array<UsersetTreeComputed>}
     * @memberof SandcastleUsersetTreeTupleToUserset
     */
    computed?: Array<UsersetTreeComputed>;
}
/**
 * 
 * @export
 * @interface SandcastleWriteAuthzModelResponse
 */
export interface SandcastleWriteAuthzModelResponse {
    /**
     * 
     * @type {string}
     * @memberof SandcastleWriteAuthzModelResponse
     */
    authorization_model_id?: string;
}
/**
 * 
 * @export
 * @interface SandcastleWriteRequestParams
 */
export interface SandcastleWriteRequestParams {
    /**
     * 
     * @type {SandcastleTupleKeys}
     * @memberof SandcastleWriteRequestParams
     */
    writes?: SandcastleTupleKeys;
    /**
     * 
     * @type {SandcastleTupleKeys}
     * @memberof SandcastleWriteRequestParams
     */
    deletes?: SandcastleTupleKeys;
    /**
     * 
     * @type {string}
     * @memberof SandcastleWriteRequestParams
     */
    authorization_model_id?: string;
    /**
     * 
     * @type {SandcastleTuple}
     * @memberof SandcastleWriteRequestParams
     */
    lock_tuple?: SandcastleTuple;
}
/**
 * 
 * @export
 * @interface SandcastleWriteSettingsRequestParams
 */
export interface SandcastleWriteSettingsRequestParams {
    /**
     * 
     * @type {SettingsEnvironment}
     * @memberof SandcastleWriteSettingsRequestParams
     */
    environment?: SettingsEnvironment;
}
/**
 * 
 * @export
 * @interface SandcastleWriteTokenIssuersRequestParams
 */
export interface SandcastleWriteTokenIssuersRequestParams {
    /**
     * 
     * @type {string}
     * @memberof SandcastleWriteTokenIssuersRequestParams
     */
    issuer_url?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum SettingsEnvironment {
    EnvironmentUnspecified = 'ENVIRONMENT_UNSPECIFIED',
    Development = 'DEVELOPMENT',
    Staging = 'STAGING',
    Production = 'PRODUCTION'
}

/**
 * 
 * @export
 * @interface SettingsSettings
 */
export interface SettingsSettings {
    /**
     * 
     * @type {SettingsEnvironment}
     * @memberof SettingsSettings
     */
    environment?: SettingsEnvironment;
    /**
     * 
     * @type {Array<SettingsTokenIssuer>}
     * @memberof SettingsSettings
     */
    token_issuers?: Array<SettingsTokenIssuer>;
}
/**
 * 
 * @export
 * @interface SettingsTokenIssuer
 */
export interface SettingsTokenIssuer {
    /**
     * 
     * @type {string}
     * @memberof SettingsTokenIssuer
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SettingsTokenIssuer
     */
    issuer_url?: string;
}
/**
 * 
 * @export
 * @interface UsersetTreeComputed
 */
export interface UsersetTreeComputed {
    /**
     * 
     * @type {string}
     * @memberof UsersetTreeComputed
     */
    userset?: string;
}
/**
 * A leaf node contains either  - a set of users (which may be individual users, or usersets   referencing other relations - a computed node, which is the result of a computed userset   value in the authorization model - a tupleToUserset nodes, containing the result of expanding   a tupleToUserset value in a authorization model.
 * @export
 * @interface UsersetTreeLeaf
 */
export interface UsersetTreeLeaf {
    /**
     * 
     * @type {UsersetTreeUsers}
     * @memberof UsersetTreeLeaf
     */
    users?: UsersetTreeUsers;
    /**
     * 
     * @type {UsersetTreeComputed}
     * @memberof UsersetTreeLeaf
     */
    computed?: UsersetTreeComputed;
    /**
     * 
     * @type {SandcastleUsersetTreeTupleToUserset}
     * @memberof UsersetTreeLeaf
     */
    tupleToUserset?: SandcastleUsersetTreeTupleToUserset;
}
/**
 * 
 * @export
 * @interface UsersetTreeNode
 */
export interface UsersetTreeNode {
    /**
     * 
     * @type {string}
     * @memberof UsersetTreeNode
     */
    name?: string;
    /**
     * 
     * @type {UsersetTreeLeaf}
     * @memberof UsersetTreeNode
     */
    leaf?: UsersetTreeLeaf;
    /**
     * 
     * @type {SandcastleUsersetTreeDifference}
     * @memberof UsersetTreeNode
     */
    difference?: SandcastleUsersetTreeDifference;
    /**
     * 
     * @type {UsersetTreeNodes}
     * @memberof UsersetTreeNode
     */
    union?: UsersetTreeNodes;
    /**
     * 
     * @type {UsersetTreeNodes}
     * @memberof UsersetTreeNode
     */
    intersection?: UsersetTreeNodes;
}
/**
 * 
 * @export
 * @interface UsersetTreeNodes
 */
export interface UsersetTreeNodes {
    /**
     * 
     * @type {Array<UsersetTreeNode>}
     * @memberof UsersetTreeNodes
     */
    nodes?: Array<UsersetTreeNode>;
}
/**
 * 
 * @export
 * @interface UsersetTreeUsers
 */
export interface UsersetTreeUsers {
    /**
     * 
     * @type {Array<string>}
     * @memberof UsersetTreeUsers
     */
    users?: Array<string>;
}

/**
 * SandcastleApi - axios parameter creator
 * @export
 */
export const SandcastleApiAxiosParamCreator = function (configuration: Configuration) {
    return {
        /**
         * The check API will return whether the user has a certain relationship with an object in a certain store. Path parameter `store_id` as well as body parameter `object`, `relation` and `user` are all required. The response will return whether the relationship exists in the field `allowed`.  ## Limits - Each store has a limit of **50** check requests per second (RPS). ## Example In order to check if user `anne@auth0.com` has an owner relationship with object document:2021-budget, a check API call should be fired with the following body ```json {   \"tuple_key\": {     \"object\": \"document:2021-budget\",     \"relation\": \"owner\"     \"user\": \"anne@auth0.com\"   } } ``` Sandcastle\'s response will include `{ \"allowed\": true }` if there is a relationship and `{ \"allowed\": false }` if there isn\'t.
         * @summary Check whether a user is authorized to access an object
         * @param {SandcastleCheckRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check: async (body: SandcastleCheckRequestParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('check', 'body', body)
            const localVarPath = `/{store_id}/check`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The DELETE token-issuers API will remove the 3rd party token issuer as a token issuer that are allowed by Sandcastle.  The specified id is the id associated with the issuer url that is to be removed. Path parameter `store_id` and `id` are all required. ## Example To remove the 3rd party token issuer `https://example.issuer.com` (which has the id `0ujsszwN8NRY24YaXiTIE2VWDTS`), call DELETE token-issuers API with the path parameter id `0ujsszwN8NRY24YaXiTIE2VWDTS`.
         * @summary Remove 3rd party token issuer for Sandcastle read and write operation
         * @param {string} id Id of token issuer to be removed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTokenIssuer: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTokenIssuer', 'id', id)
            const localVarPath = `/{store_id}/settings/token-issuers/{id}`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
                        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The expand API will return all users (including user and userset) that have certain relationship with an object in a certain store. This is different from the `/{store_id}/read` API in that both direct and indirect references are returned. Path parameter `store_id` as well as body parameter `object`, `relation` are all required. The response will return a userset tree whose leaves are the user id and usersets.  Union, intersection and difference operator are located in the intermediate nodes.  ## Limits - Each store has a limit of **30** expand requests per minute (RPM). ## Example Assume the following type definition for document: ```yaml   - name: document     relations:       reader:         anyOf:           - self           - usersRelatedToObjectAs: writer       writer:         self ``` In order to expand all users that have reader relationship with object document:2021-budget, an expand API call should be fired with the following body ```json {   \"tuple_key\": {     \"object\": \"document:2021-budget\",     \"relation\": \"reader\"   } } ``` Sandcastle\'s response will be a userset tree of the users and computed usersets that have read access to the document. ```json {   \"tree\":{     \"root\":{       \"type\":\"document:2021-budget#reader\",       \"union\":{         \"nodes\":[           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"users\":{                 \"users\":[                   \"bob@auth0.com\"                 ]               }             }           },           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"computed\":{                 \"userset\":\"document:2021-budget#writer\"               }             }           }         ]       }     }   } } ``` The caller can then call expand API for the writer relationship for the `document:2021-budget`.
         * @summary Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship
         * @param {SandcastleExpandRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expand: async (body: SandcastleExpandRequestParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('expand', 'body', body)
            const localVarPath = `/{store_id}/expand`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The POST read API will return the tuples for a certain store that matches a query filter specified in the body. Tuples and type definitions allow Sandcastle to determine whether a relationship exists between an object and an user. It is different from the `/{store_id}/expand` API in that only direct relationships are returned. Path parameter `store_id` is required.  In the body: 1. Object is mandatory. An object can be a full object (e.g., `type:object_id`) or type only (e.g., `type:`). 2. User is mandatory in the case the object is type only. ## Limits - Each store has a limit of **2** read requests per second (RPS). ## Examples ### Query for all objects in a type definition To query for all objects that `bob@auth0.com` has `reader` relationship in the document type definition, call read API with body of  ```json {  \"tuple_key\": {      \"object\": \"document:\",      \"relation\": \"reader\",      \"user\": \"bob@auth0.com\"   } } ``` The API will return something like  ```json {       \"tuple_key\": {         \"object\": \"document:2021-budget\",         \"relation\": \"reader\",         \"user\": \"bob@auth0.com\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\" } ``` This means that `bob@auth0.com` has a `reader` relationship with 1 document `document:2021-budget`. ### Query for all users with particular relationships for a particular document To query for all users that have `reader` relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {      \"object\": \"document:2021-budget\",      \"relation\": \"reader\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"object\": \"document:2021-budget\",         \"relation\": \"reader\",         \"user\": \"bob@auth0.com\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     },   ] } ``` This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`).  Note that the API will not return writers such as `anne@auth0.com` even when all writers are readers.  This is because only direct relationship are returned for the READ API. ### Query for all users with all relationships for a particular document To query for all users that have any relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {       \"object\": \"document:2021-budget\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"object\": \"document:2021-budget\",         \"relation\": \"writer\",         \"user\": \"anne@auth0.com\"       },       \"timestamp\": \"2021-10-05T13:42:12.356Z\"     },     {       \"key\": {         \"object\": \"document:2021-budget\",         \"relation\": \"reader\",         \"user\": \"bob@auth0.com\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     },   ] } ``` This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`) and 1 `writer` (`anne@auth0.com`). 
         * @summary Get tuples from the store that matches a query, without following userset rewrite rules
         * @param {SandcastleReadRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        read: async (body: SandcastleReadRequestParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('read', 'body', body)
            const localVarPath = `/{store_id}/read`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The GET authorization-models by ID API will return a particular version of authorization model that had been configured for a certain store.   Path parameter `store_id` and `id` are required. The response will return the authorization model for the particular version.  ## Limits - Each store has a limit of **30** read authorization-models requests per minute (RPM). ## Example To retrieve the authorization model with ID `1yunpF9DkzXMzm0dHrsCuWsooEV` for the store, call the GET authorization-models by ID API with `1yunpF9DkzXMzm0dHrsCuWsooEV` as the `id` path parameter.  The API will return: ```json {   \"authorization_model\":{     \"id\":\"1yunpF9DkzXMzm0dHrsCuWsooEV\",     \"type_definitions\":{       \"type_definitions\":[         {           \"type\":\"document\",           \"relations\":{             \"reader\":{               \"union\":{                 \"child\":[                   {                     \"this\":{                      }                   },                   {                     \"computedUserset\":{                       \"object\":\"\",                       \"relation\":\"writer\"                     }                   }                 ]               }             },             \"writer\":{               \"this\":{                }             }           }         }       ]     }   } } ``` In the above example, there is only 1 type (`document`) with 2 relations (`writer` and `reader`).
         * @summary Return a particular version of an authorization model
         * @param {string} id The authorization model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAuthzModel: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('readAuthzModel', 'id', id)
            const localVarPath = `/{store_id}/authorization-models/{id}`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
                        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The GET authorization-models API will return all the IDs of the authorization models for a certain store. Path parameter `store_id` is required. Sandcastle\'s response will contain an array of all authorization model IDs, sorted in descending order of creation.  ## Limits - Each store has a limit of **30** read authorization-models requests per minute (RPM). - Each response can contain up to **50** authorization model IDs. ## Example Assume that the store\'s authorization model has been configured twice.  To get all the IDs of the authorization models that had been created in this store, call GET authorization-models.  The API will return a response that looks like: ```json {   \"authorization_model_ids\": [       \"1yunpF9DkzXMzm0dHrsCuWsooEV\",       \"1yundoHpJHlodgn4EOVar2DhmKp\"   ] } ``` If there are more authorization model IDs available, the response will contain an extra field `continuation_token`: ```json {   \"authorization_model_ids\": [       \"1yunpF9DkzXMzm0dHrsCuWsooEV\",       \"1yundoHpJHlodgn4EOVar2DhmKp\"   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` 
         * @summary Check whether a user is authorized to access an object
         * @param {number} [pageSize] 
         * @param {string} [continuationToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAuthzModels: async (pageSize?: number, continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/{store_id}/authorization-models`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuation_token'] = continuationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The GET settings API will return the store\'s settings, including environment tag and an array of Sandcastle\'s allowed 3rd party token issuers. The environment tag is used to differentiate between development, staging, and production environments.   Path parameter `store_id` is required. ## Example GET settings API\'s response looks like: ```json {   \"environment\":\"STAGING\",   \"token_issuers\":[     {       \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\",       \"issuer_url\":\"https://example.issuer.com\"     }   ] } ``` In the above response, the store is configured as STAGING and there is one allowed 3rd party token issuer `https://example.issuer.com`.
         * @summary Return store settings, including the environment tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/{store_id}/settings`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The POST write API will update the tuples for a certain store.  Tuples and type definitions allow Sandcastle to determine whether a relationship exists between an object and an user. Path parameter `store_id` is required.  In the body, `writes` adds new tuples while `deletes` remove existing tuples.  `lock_tuple` is reserved for future use.  ## Limits - Each write API call allows at most **25** tuples. - Each store has a limit of **50000** tuples. - Each store has a limit of **1** write requests per second (RPS). ## Example ### Adding relationships To add `anne@auth0.com` as a `writer` for `document:2021-budget`, call write API with the following  ```json {   \"writes\": {     \"tuple_keys\": [       {         \"object\": \"document:2021-budget\",         \"relation\": \"writer\",         \"user\": \"anne@auth0.com\"       }     ]   } } ``` ### Removing relationships To remove `bob@auth0.com` as a `reader` for `document:2021-budget`, call write API with the following  ```json {   \"deletes\": {     \"tuple_keys\": [       {         \"object\": \"document:2021-budget\",         \"relation\": \"reader\",         \"user\": \"bob@auth0.com\"       }     ]   } } ``` 
         * @summary Add or delete tuples from the store
         * @param {SandcastleWriteRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        write: async (body: SandcastleWriteRequestParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('write', 'body', body)
            const localVarPath = `/{store_id}/write`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The POST authorization-model API will update the authorization model for a certain store. Path parameter `store_id` and `type_definitions` array in the body are required.  Each item in the `type_definitions` array is a type definition as specified in the field `type_definition`. The response will return the authorization model\'s ID in the `id` field.  ## Limits - There can be at most **10** items in the type_definitions array. - Each store can have at most **10** authorization models. - Each store has a limit of **10** POST authorization-models requests per minute (RPM). ## Example To update the authorization model with a single `document` authorization model, call POST authorization-models API with the body:  ```json {   \"type_definitions\":[     {       \"type\":\"document\",       \"relations\":{         \"reader\":{           \"union\":{             \"child\":[               {                 \"this\":{                  }               },               {                 \"computedUserset\":{                   \"object\":\"\",                   \"relation\":\"writer\"                 }               }             ]           }         },         \"writer\":{           \"this\":{            }         }       }     }   ] } ``` Sandcastle\'s response will include the version id for this authorization model, which will look like  ``` {\"authorization_model_id\": \"1yunpF9DkzXMzm0dHrsCuWsooEV\"} ``` 
         * @summary Create a new authorization model
         * @param {AuthzmodelTypeDefinitions} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeAuthzModel: async (body: AuthzmodelTypeDefinitions, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('writeAuthzModel', 'body', body)
            const localVarPath = `/{store_id}/authorization-models`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The PATCH settings API will update the environment tag to differentiate between development, staging, and production environments. Path parameter `store_id` is required. The response will return the updated environment tag as well as other configuration settings.  ## Example To update store\'s environment tag to `STAGING`, call PATCH settings API with the following with the body:  ```json {\"environment\": \"STAGING\"} ``` 
         * @summary Update the environment tag for a store
         * @param {SandcastleWriteSettingsRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeSettings: async (body: SandcastleWriteSettingsRequestParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('writeSettings', 'body', body)
            const localVarPath = `/{store_id}/settings`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The POST token-issuers API will configure system so that tokens issued by the specified 3rd party token issuer will be allowed for Sandcastle\'s read and write operations.  Otherwise, only tokens issued by Sandcastle\'s issuer (such as `sandcastle.us.auth0.com` and `sandcastle-dev.us.auth0.com`) are accepted by Sandcastle stores API.  Other tokens issued by providers external to Sandcastle will be rejected. An example use case is to have browsers directly calling Sandcastle API. Path parameter `store_id` as well as body parameter `issuer_url` are all required. ## Example To allow tokens issued by the 3rd party token issuer `https://example.issuer.com` for Sandcastle\'s read and write operations : 1. In the 3rd party issuer, configure Sandcastle API with the following audience (`https://api.staging.sandcastle.cloud`) in its issuer configuration. 2. Call POST token-issuers API with the body: `{\"issuer_url\": \"https://example.issuer.com\"}`  Sandcastle\'s response will include the id that is associated with the token issuer as well as the issuer url, and looks like  ```json {   \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\",   \"issuer_url\":\"https://example.issuer.com\" } ``` 
         * @summary Add 3rd party token issuer for Sandcastle read and write operations
         * @param {SandcastleWriteTokenIssuersRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeTokenIssuer: async (body: SandcastleWriteTokenIssuersRequestParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('writeTokenIssuer', 'body', body)
            const localVarPath = `/{store_id}/settings/token-issuers`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SandcastleApi - functional programming interface
 * @export
 */
export const SandcastleApiFp = function(configuration: Configuration) {
    const localVarAxiosParamCreator = SandcastleApiAxiosParamCreator(configuration)
    return {
        /**
         * The check API will return whether the user has a certain relationship with an object in a certain store. Path parameter `store_id` as well as body parameter `object`, `relation` and `user` are all required. The response will return whether the relationship exists in the field `allowed`.  ## Limits - Each store has a limit of **50** check requests per second (RPS). ## Example In order to check if user `anne@auth0.com` has an owner relationship with object document:2021-budget, a check API call should be fired with the following body ```json {   \"tuple_key\": {     \"object\": \"document:2021-budget\",     \"relation\": \"owner\"     \"user\": \"anne@auth0.com\"   } } ``` Sandcastle\'s response will include `{ \"allowed\": true }` if there is a relationship and `{ \"allowed\": false }` if there isn\'t.
         * @summary Check whether a user is authorized to access an object
         * @param {SandcastleCheckRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async check(body: SandcastleCheckRequestParams, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<SandcastleCheckResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.check(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The DELETE token-issuers API will remove the 3rd party token issuer as a token issuer that are allowed by Sandcastle.  The specified id is the id associated with the issuer url that is to be removed. Path parameter `store_id` and `id` are all required. ## Example To remove the 3rd party token issuer `https://example.issuer.com` (which has the id `0ujsszwN8NRY24YaXiTIE2VWDTS`), call DELETE token-issuers API with the path parameter id `0ujsszwN8NRY24YaXiTIE2VWDTS`.
         * @summary Remove 3rd party token issuer for Sandcastle read and write operation
         * @param {string} id Id of token issuer to be removed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTokenIssuer(id: string, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTokenIssuer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The expand API will return all users (including user and userset) that have certain relationship with an object in a certain store. This is different from the `/{store_id}/read` API in that both direct and indirect references are returned. Path parameter `store_id` as well as body parameter `object`, `relation` are all required. The response will return a userset tree whose leaves are the user id and usersets.  Union, intersection and difference operator are located in the intermediate nodes.  ## Limits - Each store has a limit of **30** expand requests per minute (RPM). ## Example Assume the following type definition for document: ```yaml   - name: document     relations:       reader:         anyOf:           - self           - usersRelatedToObjectAs: writer       writer:         self ``` In order to expand all users that have reader relationship with object document:2021-budget, an expand API call should be fired with the following body ```json {   \"tuple_key\": {     \"object\": \"document:2021-budget\",     \"relation\": \"reader\"   } } ``` Sandcastle\'s response will be a userset tree of the users and computed usersets that have read access to the document. ```json {   \"tree\":{     \"root\":{       \"type\":\"document:2021-budget#reader\",       \"union\":{         \"nodes\":[           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"users\":{                 \"users\":[                   \"bob@auth0.com\"                 ]               }             }           },           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"computed\":{                 \"userset\":\"document:2021-budget#writer\"               }             }           }         ]       }     }   } } ``` The caller can then call expand API for the writer relationship for the `document:2021-budget`.
         * @summary Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship
         * @param {SandcastleExpandRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expand(body: SandcastleExpandRequestParams, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<SandcastleExpandResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expand(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The POST read API will return the tuples for a certain store that matches a query filter specified in the body. Tuples and type definitions allow Sandcastle to determine whether a relationship exists between an object and an user. It is different from the `/{store_id}/expand` API in that only direct relationships are returned. Path parameter `store_id` is required.  In the body: 1. Object is mandatory. An object can be a full object (e.g., `type:object_id`) or type only (e.g., `type:`). 2. User is mandatory in the case the object is type only. ## Limits - Each store has a limit of **2** read requests per second (RPS). ## Examples ### Query for all objects in a type definition To query for all objects that `bob@auth0.com` has `reader` relationship in the document type definition, call read API with body of  ```json {  \"tuple_key\": {      \"object\": \"document:\",      \"relation\": \"reader\",      \"user\": \"bob@auth0.com\"   } } ``` The API will return something like  ```json {       \"tuple_key\": {         \"object\": \"document:2021-budget\",         \"relation\": \"reader\",         \"user\": \"bob@auth0.com\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\" } ``` This means that `bob@auth0.com` has a `reader` relationship with 1 document `document:2021-budget`. ### Query for all users with particular relationships for a particular document To query for all users that have `reader` relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {      \"object\": \"document:2021-budget\",      \"relation\": \"reader\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"object\": \"document:2021-budget\",         \"relation\": \"reader\",         \"user\": \"bob@auth0.com\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     },   ] } ``` This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`).  Note that the API will not return writers such as `anne@auth0.com` even when all writers are readers.  This is because only direct relationship are returned for the READ API. ### Query for all users with all relationships for a particular document To query for all users that have any relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {       \"object\": \"document:2021-budget\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"object\": \"document:2021-budget\",         \"relation\": \"writer\",         \"user\": \"anne@auth0.com\"       },       \"timestamp\": \"2021-10-05T13:42:12.356Z\"     },     {       \"key\": {         \"object\": \"document:2021-budget\",         \"relation\": \"reader\",         \"user\": \"bob@auth0.com\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     },   ] } ``` This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`) and 1 `writer` (`anne@auth0.com`). 
         * @summary Get tuples from the store that matches a query, without following userset rewrite rules
         * @param {SandcastleReadRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async read(body: SandcastleReadRequestParams, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<SandcastleReadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.read(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The GET authorization-models by ID API will return a particular version of authorization model that had been configured for a certain store.   Path parameter `store_id` and `id` are required. The response will return the authorization model for the particular version.  ## Limits - Each store has a limit of **30** read authorization-models requests per minute (RPM). ## Example To retrieve the authorization model with ID `1yunpF9DkzXMzm0dHrsCuWsooEV` for the store, call the GET authorization-models by ID API with `1yunpF9DkzXMzm0dHrsCuWsooEV` as the `id` path parameter.  The API will return: ```json {   \"authorization_model\":{     \"id\":\"1yunpF9DkzXMzm0dHrsCuWsooEV\",     \"type_definitions\":{       \"type_definitions\":[         {           \"type\":\"document\",           \"relations\":{             \"reader\":{               \"union\":{                 \"child\":[                   {                     \"this\":{                      }                   },                   {                     \"computedUserset\":{                       \"object\":\"\",                       \"relation\":\"writer\"                     }                   }                 ]               }             },             \"writer\":{               \"this\":{                }             }           }         }       ]     }   } } ``` In the above example, there is only 1 type (`document`) with 2 relations (`writer` and `reader`).
         * @summary Return a particular version of an authorization model
         * @param {string} id The authorization model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAuthzModel(id: string, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<SandcastleReadAuthzModelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAuthzModel(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The GET authorization-models API will return all the IDs of the authorization models for a certain store. Path parameter `store_id` is required. Sandcastle\'s response will contain an array of all authorization model IDs, sorted in descending order of creation.  ## Limits - Each store has a limit of **30** read authorization-models requests per minute (RPM). - Each response can contain up to **50** authorization model IDs. ## Example Assume that the store\'s authorization model has been configured twice.  To get all the IDs of the authorization models that had been created in this store, call GET authorization-models.  The API will return a response that looks like: ```json {   \"authorization_model_ids\": [       \"1yunpF9DkzXMzm0dHrsCuWsooEV\",       \"1yundoHpJHlodgn4EOVar2DhmKp\"   ] } ``` If there are more authorization model IDs available, the response will contain an extra field `continuation_token`: ```json {   \"authorization_model_ids\": [       \"1yunpF9DkzXMzm0dHrsCuWsooEV\",       \"1yundoHpJHlodgn4EOVar2DhmKp\"   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` 
         * @summary Check whether a user is authorized to access an object
         * @param {number} [pageSize] 
         * @param {string} [continuationToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAuthzModels(pageSize?: number, continuationToken?: string, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<SandcastleReadAuthzModelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAuthzModels(pageSize, continuationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The GET settings API will return the store\'s settings, including environment tag and an array of Sandcastle\'s allowed 3rd party token issuers. The environment tag is used to differentiate between development, staging, and production environments.   Path parameter `store_id` is required. ## Example GET settings API\'s response looks like: ```json {   \"environment\":\"STAGING\",   \"token_issuers\":[     {       \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\",       \"issuer_url\":\"https://example.issuer.com\"     }   ] } ``` In the above response, the store is configured as STAGING and there is one allowed 3rd party token issuer `https://example.issuer.com`.
         * @summary Return store settings, including the environment tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readSettings(options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<SettingsSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The POST write API will update the tuples for a certain store.  Tuples and type definitions allow Sandcastle to determine whether a relationship exists between an object and an user. Path parameter `store_id` is required.  In the body, `writes` adds new tuples while `deletes` remove existing tuples.  `lock_tuple` is reserved for future use.  ## Limits - Each write API call allows at most **25** tuples. - Each store has a limit of **50000** tuples. - Each store has a limit of **1** write requests per second (RPS). ## Example ### Adding relationships To add `anne@auth0.com` as a `writer` for `document:2021-budget`, call write API with the following  ```json {   \"writes\": {     \"tuple_keys\": [       {         \"object\": \"document:2021-budget\",         \"relation\": \"writer\",         \"user\": \"anne@auth0.com\"       }     ]   } } ``` ### Removing relationships To remove `bob@auth0.com` as a `reader` for `document:2021-budget`, call write API with the following  ```json {   \"deletes\": {     \"tuple_keys\": [       {         \"object\": \"document:2021-budget\",         \"relation\": \"reader\",         \"user\": \"bob@auth0.com\"       }     ]   } } ``` 
         * @summary Add or delete tuples from the store
         * @param {SandcastleWriteRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async write(body: SandcastleWriteRequestParams, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.write(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The POST authorization-model API will update the authorization model for a certain store. Path parameter `store_id` and `type_definitions` array in the body are required.  Each item in the `type_definitions` array is a type definition as specified in the field `type_definition`. The response will return the authorization model\'s ID in the `id` field.  ## Limits - There can be at most **10** items in the type_definitions array. - Each store can have at most **10** authorization models. - Each store has a limit of **10** POST authorization-models requests per minute (RPM). ## Example To update the authorization model with a single `document` authorization model, call POST authorization-models API with the body:  ```json {   \"type_definitions\":[     {       \"type\":\"document\",       \"relations\":{         \"reader\":{           \"union\":{             \"child\":[               {                 \"this\":{                  }               },               {                 \"computedUserset\":{                   \"object\":\"\",                   \"relation\":\"writer\"                 }               }             ]           }         },         \"writer\":{           \"this\":{            }         }       }     }   ] } ``` Sandcastle\'s response will include the version id for this authorization model, which will look like  ``` {\"authorization_model_id\": \"1yunpF9DkzXMzm0dHrsCuWsooEV\"} ``` 
         * @summary Create a new authorization model
         * @param {AuthzmodelTypeDefinitions} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async writeAuthzModel(body: AuthzmodelTypeDefinitions, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<SandcastleWriteAuthzModelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.writeAuthzModel(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The PATCH settings API will update the environment tag to differentiate between development, staging, and production environments. Path parameter `store_id` is required. The response will return the updated environment tag as well as other configuration settings.  ## Example To update store\'s environment tag to `STAGING`, call PATCH settings API with the following with the body:  ```json {\"environment\": \"STAGING\"} ``` 
         * @summary Update the environment tag for a store
         * @param {SandcastleWriteSettingsRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async writeSettings(body: SandcastleWriteSettingsRequestParams, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<SettingsSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.writeSettings(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The POST token-issuers API will configure system so that tokens issued by the specified 3rd party token issuer will be allowed for Sandcastle\'s read and write operations.  Otherwise, only tokens issued by Sandcastle\'s issuer (such as `sandcastle.us.auth0.com` and `sandcastle-dev.us.auth0.com`) are accepted by Sandcastle stores API.  Other tokens issued by providers external to Sandcastle will be rejected. An example use case is to have browsers directly calling Sandcastle API. Path parameter `store_id` as well as body parameter `issuer_url` are all required. ## Example To allow tokens issued by the 3rd party token issuer `https://example.issuer.com` for Sandcastle\'s read and write operations : 1. In the 3rd party issuer, configure Sandcastle API with the following audience (`https://api.staging.sandcastle.cloud`) in its issuer configuration. 2. Call POST token-issuers API with the body: `{\"issuer_url\": \"https://example.issuer.com\"}`  Sandcastle\'s response will include the id that is associated with the token issuer as well as the issuer url, and looks like  ```json {   \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\",   \"issuer_url\":\"https://example.issuer.com\" } ``` 
         * @summary Add 3rd party token issuer for Sandcastle read and write operations
         * @param {SandcastleWriteTokenIssuersRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async writeTokenIssuer(body: SandcastleWriteTokenIssuersRequestParams, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<SettingsTokenIssuer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.writeTokenIssuer(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
    }
};

/**
 * SandcastleApi - factory interface
 * @export
 */
export const SandcastleApiFactory = function (configuration: Configuration, axios?: AxiosInstance) {
    const localVarFp = SandcastleApiFp(configuration)
    return {
        /**
         * The check API will return whether the user has a certain relationship with an object in a certain store. Path parameter `store_id` as well as body parameter `object`, `relation` and `user` are all required. The response will return whether the relationship exists in the field `allowed`.  ## Limits - Each store has a limit of **50** check requests per second (RPS). ## Example In order to check if user `anne@auth0.com` has an owner relationship with object document:2021-budget, a check API call should be fired with the following body ```json {   \"tuple_key\": {     \"object\": \"document:2021-budget\",     \"relation\": \"owner\"     \"user\": \"anne@auth0.com\"   } } ``` Sandcastle\'s response will include `{ \"allowed\": true }` if there is a relationship and `{ \"allowed\": false }` if there isn\'t.
         * @summary Check whether a user is authorized to access an object
         * @param {SandcastleCheckRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check(body: SandcastleCheckRequestParams, options?: any): PromiseResult<SandcastleCheckResponse> {
            return localVarFp.check(body, options).then((request) => request(axios));
        },
        /**
         * The DELETE token-issuers API will remove the 3rd party token issuer as a token issuer that are allowed by Sandcastle.  The specified id is the id associated with the issuer url that is to be removed. Path parameter `store_id` and `id` are all required. ## Example To remove the 3rd party token issuer `https://example.issuer.com` (which has the id `0ujsszwN8NRY24YaXiTIE2VWDTS`), call DELETE token-issuers API with the path parameter id `0ujsszwN8NRY24YaXiTIE2VWDTS`.
         * @summary Remove 3rd party token issuer for Sandcastle read and write operation
         * @param {string} id Id of token issuer to be removed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTokenIssuer(id: string, options?: any): PromiseResult<object> {
            return localVarFp.deleteTokenIssuer(id, options).then((request) => request(axios));
        },
        /**
         * The expand API will return all users (including user and userset) that have certain relationship with an object in a certain store. This is different from the `/{store_id}/read` API in that both direct and indirect references are returned. Path parameter `store_id` as well as body parameter `object`, `relation` are all required. The response will return a userset tree whose leaves are the user id and usersets.  Union, intersection and difference operator are located in the intermediate nodes.  ## Limits - Each store has a limit of **30** expand requests per minute (RPM). ## Example Assume the following type definition for document: ```yaml   - name: document     relations:       reader:         anyOf:           - self           - usersRelatedToObjectAs: writer       writer:         self ``` In order to expand all users that have reader relationship with object document:2021-budget, an expand API call should be fired with the following body ```json {   \"tuple_key\": {     \"object\": \"document:2021-budget\",     \"relation\": \"reader\"   } } ``` Sandcastle\'s response will be a userset tree of the users and computed usersets that have read access to the document. ```json {   \"tree\":{     \"root\":{       \"type\":\"document:2021-budget#reader\",       \"union\":{         \"nodes\":[           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"users\":{                 \"users\":[                   \"bob@auth0.com\"                 ]               }             }           },           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"computed\":{                 \"userset\":\"document:2021-budget#writer\"               }             }           }         ]       }     }   } } ``` The caller can then call expand API for the writer relationship for the `document:2021-budget`.
         * @summary Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship
         * @param {SandcastleExpandRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expand(body: SandcastleExpandRequestParams, options?: any): PromiseResult<SandcastleExpandResponse> {
            return localVarFp.expand(body, options).then((request) => request(axios));
        },
        /**
         * The POST read API will return the tuples for a certain store that matches a query filter specified in the body. Tuples and type definitions allow Sandcastle to determine whether a relationship exists between an object and an user. It is different from the `/{store_id}/expand` API in that only direct relationships are returned. Path parameter `store_id` is required.  In the body: 1. Object is mandatory. An object can be a full object (e.g., `type:object_id`) or type only (e.g., `type:`). 2. User is mandatory in the case the object is type only. ## Limits - Each store has a limit of **2** read requests per second (RPS). ## Examples ### Query for all objects in a type definition To query for all objects that `bob@auth0.com` has `reader` relationship in the document type definition, call read API with body of  ```json {  \"tuple_key\": {      \"object\": \"document:\",      \"relation\": \"reader\",      \"user\": \"bob@auth0.com\"   } } ``` The API will return something like  ```json {       \"tuple_key\": {         \"object\": \"document:2021-budget\",         \"relation\": \"reader\",         \"user\": \"bob@auth0.com\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\" } ``` This means that `bob@auth0.com` has a `reader` relationship with 1 document `document:2021-budget`. ### Query for all users with particular relationships for a particular document To query for all users that have `reader` relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {      \"object\": \"document:2021-budget\",      \"relation\": \"reader\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"object\": \"document:2021-budget\",         \"relation\": \"reader\",         \"user\": \"bob@auth0.com\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     },   ] } ``` This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`).  Note that the API will not return writers such as `anne@auth0.com` even when all writers are readers.  This is because only direct relationship are returned for the READ API. ### Query for all users with all relationships for a particular document To query for all users that have any relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {       \"object\": \"document:2021-budget\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"object\": \"document:2021-budget\",         \"relation\": \"writer\",         \"user\": \"anne@auth0.com\"       },       \"timestamp\": \"2021-10-05T13:42:12.356Z\"     },     {       \"key\": {         \"object\": \"document:2021-budget\",         \"relation\": \"reader\",         \"user\": \"bob@auth0.com\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     },   ] } ``` This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`) and 1 `writer` (`anne@auth0.com`). 
         * @summary Get tuples from the store that matches a query, without following userset rewrite rules
         * @param {SandcastleReadRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        read(body: SandcastleReadRequestParams, options?: any): PromiseResult<SandcastleReadResponse> {
            return localVarFp.read(body, options).then((request) => request(axios));
        },
        /**
         * The GET authorization-models by ID API will return a particular version of authorization model that had been configured for a certain store.   Path parameter `store_id` and `id` are required. The response will return the authorization model for the particular version.  ## Limits - Each store has a limit of **30** read authorization-models requests per minute (RPM). ## Example To retrieve the authorization model with ID `1yunpF9DkzXMzm0dHrsCuWsooEV` for the store, call the GET authorization-models by ID API with `1yunpF9DkzXMzm0dHrsCuWsooEV` as the `id` path parameter.  The API will return: ```json {   \"authorization_model\":{     \"id\":\"1yunpF9DkzXMzm0dHrsCuWsooEV\",     \"type_definitions\":{       \"type_definitions\":[         {           \"type\":\"document\",           \"relations\":{             \"reader\":{               \"union\":{                 \"child\":[                   {                     \"this\":{                      }                   },                   {                     \"computedUserset\":{                       \"object\":\"\",                       \"relation\":\"writer\"                     }                   }                 ]               }             },             \"writer\":{               \"this\":{                }             }           }         }       ]     }   } } ``` In the above example, there is only 1 type (`document`) with 2 relations (`writer` and `reader`).
         * @summary Return a particular version of an authorization model
         * @param {string} id The authorization model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAuthzModel(id: string, options?: any): PromiseResult<SandcastleReadAuthzModelResponse> {
            return localVarFp.readAuthzModel(id, options).then((request) => request(axios));
        },
        /**
         * The GET authorization-models API will return all the IDs of the authorization models for a certain store. Path parameter `store_id` is required. Sandcastle\'s response will contain an array of all authorization model IDs, sorted in descending order of creation.  ## Limits - Each store has a limit of **30** read authorization-models requests per minute (RPM). - Each response can contain up to **50** authorization model IDs. ## Example Assume that the store\'s authorization model has been configured twice.  To get all the IDs of the authorization models that had been created in this store, call GET authorization-models.  The API will return a response that looks like: ```json {   \"authorization_model_ids\": [       \"1yunpF9DkzXMzm0dHrsCuWsooEV\",       \"1yundoHpJHlodgn4EOVar2DhmKp\"   ] } ``` If there are more authorization model IDs available, the response will contain an extra field `continuation_token`: ```json {   \"authorization_model_ids\": [       \"1yunpF9DkzXMzm0dHrsCuWsooEV\",       \"1yundoHpJHlodgn4EOVar2DhmKp\"   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` 
         * @summary Check whether a user is authorized to access an object
         * @param {number} [pageSize] 
         * @param {string} [continuationToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAuthzModels(pageSize?: number, continuationToken?: string, options?: any): PromiseResult<SandcastleReadAuthzModelsResponse> {
            return localVarFp.readAuthzModels(pageSize, continuationToken, options).then((request) => request(axios));
        },
        /**
         * The GET settings API will return the store\'s settings, including environment tag and an array of Sandcastle\'s allowed 3rd party token issuers. The environment tag is used to differentiate between development, staging, and production environments.   Path parameter `store_id` is required. ## Example GET settings API\'s response looks like: ```json {   \"environment\":\"STAGING\",   \"token_issuers\":[     {       \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\",       \"issuer_url\":\"https://example.issuer.com\"     }   ] } ``` In the above response, the store is configured as STAGING and there is one allowed 3rd party token issuer `https://example.issuer.com`.
         * @summary Return store settings, including the environment tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSettings(options?: any): PromiseResult<SettingsSettings> {
            return localVarFp.readSettings(options).then((request) => request(axios));
        },
        /**
         * The POST write API will update the tuples for a certain store.  Tuples and type definitions allow Sandcastle to determine whether a relationship exists between an object and an user. Path parameter `store_id` is required.  In the body, `writes` adds new tuples while `deletes` remove existing tuples.  `lock_tuple` is reserved for future use.  ## Limits - Each write API call allows at most **25** tuples. - Each store has a limit of **50000** tuples. - Each store has a limit of **1** write requests per second (RPS). ## Example ### Adding relationships To add `anne@auth0.com` as a `writer` for `document:2021-budget`, call write API with the following  ```json {   \"writes\": {     \"tuple_keys\": [       {         \"object\": \"document:2021-budget\",         \"relation\": \"writer\",         \"user\": \"anne@auth0.com\"       }     ]   } } ``` ### Removing relationships To remove `bob@auth0.com` as a `reader` for `document:2021-budget`, call write API with the following  ```json {   \"deletes\": {     \"tuple_keys\": [       {         \"object\": \"document:2021-budget\",         \"relation\": \"reader\",         \"user\": \"bob@auth0.com\"       }     ]   } } ``` 
         * @summary Add or delete tuples from the store
         * @param {SandcastleWriteRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        write(body: SandcastleWriteRequestParams, options?: any): PromiseResult<object> {
            return localVarFp.write(body, options).then((request) => request(axios));
        },
        /**
         * The POST authorization-model API will update the authorization model for a certain store. Path parameter `store_id` and `type_definitions` array in the body are required.  Each item in the `type_definitions` array is a type definition as specified in the field `type_definition`. The response will return the authorization model\'s ID in the `id` field.  ## Limits - There can be at most **10** items in the type_definitions array. - Each store can have at most **10** authorization models. - Each store has a limit of **10** POST authorization-models requests per minute (RPM). ## Example To update the authorization model with a single `document` authorization model, call POST authorization-models API with the body:  ```json {   \"type_definitions\":[     {       \"type\":\"document\",       \"relations\":{         \"reader\":{           \"union\":{             \"child\":[               {                 \"this\":{                  }               },               {                 \"computedUserset\":{                   \"object\":\"\",                   \"relation\":\"writer\"                 }               }             ]           }         },         \"writer\":{           \"this\":{            }         }       }     }   ] } ``` Sandcastle\'s response will include the version id for this authorization model, which will look like  ``` {\"authorization_model_id\": \"1yunpF9DkzXMzm0dHrsCuWsooEV\"} ``` 
         * @summary Create a new authorization model
         * @param {AuthzmodelTypeDefinitions} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeAuthzModel(body: AuthzmodelTypeDefinitions, options?: any): PromiseResult<SandcastleWriteAuthzModelResponse> {
            return localVarFp.writeAuthzModel(body, options).then((request) => request(axios));
        },
        /**
         * The PATCH settings API will update the environment tag to differentiate between development, staging, and production environments. Path parameter `store_id` is required. The response will return the updated environment tag as well as other configuration settings.  ## Example To update store\'s environment tag to `STAGING`, call PATCH settings API with the following with the body:  ```json {\"environment\": \"STAGING\"} ``` 
         * @summary Update the environment tag for a store
         * @param {SandcastleWriteSettingsRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeSettings(body: SandcastleWriteSettingsRequestParams, options?: any): PromiseResult<SettingsSettings> {
            return localVarFp.writeSettings(body, options).then((request) => request(axios));
        },
        /**
         * The POST token-issuers API will configure system so that tokens issued by the specified 3rd party token issuer will be allowed for Sandcastle\'s read and write operations.  Otherwise, only tokens issued by Sandcastle\'s issuer (such as `sandcastle.us.auth0.com` and `sandcastle-dev.us.auth0.com`) are accepted by Sandcastle stores API.  Other tokens issued by providers external to Sandcastle will be rejected. An example use case is to have browsers directly calling Sandcastle API. Path parameter `store_id` as well as body parameter `issuer_url` are all required. ## Example To allow tokens issued by the 3rd party token issuer `https://example.issuer.com` for Sandcastle\'s read and write operations : 1. In the 3rd party issuer, configure Sandcastle API with the following audience (`https://api.staging.sandcastle.cloud`) in its issuer configuration. 2. Call POST token-issuers API with the body: `{\"issuer_url\": \"https://example.issuer.com\"}`  Sandcastle\'s response will include the id that is associated with the token issuer as well as the issuer url, and looks like  ```json {   \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\",   \"issuer_url\":\"https://example.issuer.com\" } ``` 
         * @summary Add 3rd party token issuer for Sandcastle read and write operations
         * @param {SandcastleWriteTokenIssuersRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeTokenIssuer(body: SandcastleWriteTokenIssuersRequestParams, options?: any): PromiseResult<SettingsTokenIssuer> {
            return localVarFp.writeTokenIssuer(body, options).then((request) => request(axios));
        },
    };
};

/**
 * SandcastleApi - object-oriented interface
 * @export
 * @class SandcastleApi
 * @extends {BaseAPI}
 */
export class SandcastleApi extends BaseAPI {
    /**
     * The check API will return whether the user has a certain relationship with an object in a certain store. Path parameter `store_id` as well as body parameter `object`, `relation` and `user` are all required. The response will return whether the relationship exists in the field `allowed`.  ## Limits - Each store has a limit of **50** check requests per second (RPS). ## Example In order to check if user `anne@auth0.com` has an owner relationship with object document:2021-budget, a check API call should be fired with the following body ```json {   \"tuple_key\": {     \"object\": \"document:2021-budget\",     \"relation\": \"owner\"     \"user\": \"anne@auth0.com\"   } } ``` Sandcastle\'s response will include `{ \"allowed\": true }` if there is a relationship and `{ \"allowed\": false }` if there isn\'t.
     * @summary Check whether a user is authorized to access an object
     * @param {SandcastleCheckRequestParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandcastleApi
     */
    public check(body: SandcastleCheckRequestParams, options?: any) {
        return SandcastleApiFp(this.configuration).check(body, options).then((request) => request(this.axios));
    }

    /**
     * The DELETE token-issuers API will remove the 3rd party token issuer as a token issuer that are allowed by Sandcastle.  The specified id is the id associated with the issuer url that is to be removed. Path parameter `store_id` and `id` are all required. ## Example To remove the 3rd party token issuer `https://example.issuer.com` (which has the id `0ujsszwN8NRY24YaXiTIE2VWDTS`), call DELETE token-issuers API with the path parameter id `0ujsszwN8NRY24YaXiTIE2VWDTS`.
     * @summary Remove 3rd party token issuer for Sandcastle read and write operation
     * @param {string} id Id of token issuer to be removed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandcastleApi
     */
    public deleteTokenIssuer(id: string, options?: any) {
        return SandcastleApiFp(this.configuration).deleteTokenIssuer(id, options).then((request) => request(this.axios));
    }

    /**
     * The expand API will return all users (including user and userset) that have certain relationship with an object in a certain store. This is different from the `/{store_id}/read` API in that both direct and indirect references are returned. Path parameter `store_id` as well as body parameter `object`, `relation` are all required. The response will return a userset tree whose leaves are the user id and usersets.  Union, intersection and difference operator are located in the intermediate nodes.  ## Limits - Each store has a limit of **30** expand requests per minute (RPM). ## Example Assume the following type definition for document: ```yaml   - name: document     relations:       reader:         anyOf:           - self           - usersRelatedToObjectAs: writer       writer:         self ``` In order to expand all users that have reader relationship with object document:2021-budget, an expand API call should be fired with the following body ```json {   \"tuple_key\": {     \"object\": \"document:2021-budget\",     \"relation\": \"reader\"   } } ``` Sandcastle\'s response will be a userset tree of the users and computed usersets that have read access to the document. ```json {   \"tree\":{     \"root\":{       \"type\":\"document:2021-budget#reader\",       \"union\":{         \"nodes\":[           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"users\":{                 \"users\":[                   \"bob@auth0.com\"                 ]               }             }           },           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"computed\":{                 \"userset\":\"document:2021-budget#writer\"               }             }           }         ]       }     }   } } ``` The caller can then call expand API for the writer relationship for the `document:2021-budget`.
     * @summary Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship
     * @param {SandcastleExpandRequestParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandcastleApi
     */
    public expand(body: SandcastleExpandRequestParams, options?: any) {
        return SandcastleApiFp(this.configuration).expand(body, options).then((request) => request(this.axios));
    }

    /**
     * The POST read API will return the tuples for a certain store that matches a query filter specified in the body. Tuples and type definitions allow Sandcastle to determine whether a relationship exists between an object and an user. It is different from the `/{store_id}/expand` API in that only direct relationships are returned. Path parameter `store_id` is required.  In the body: 1. Object is mandatory. An object can be a full object (e.g., `type:object_id`) or type only (e.g., `type:`). 2. User is mandatory in the case the object is type only. ## Limits - Each store has a limit of **2** read requests per second (RPS). ## Examples ### Query for all objects in a type definition To query for all objects that `bob@auth0.com` has `reader` relationship in the document type definition, call read API with body of  ```json {  \"tuple_key\": {      \"object\": \"document:\",      \"relation\": \"reader\",      \"user\": \"bob@auth0.com\"   } } ``` The API will return something like  ```json {       \"tuple_key\": {         \"object\": \"document:2021-budget\",         \"relation\": \"reader\",         \"user\": \"bob@auth0.com\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\" } ``` This means that `bob@auth0.com` has a `reader` relationship with 1 document `document:2021-budget`. ### Query for all users with particular relationships for a particular document To query for all users that have `reader` relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {      \"object\": \"document:2021-budget\",      \"relation\": \"reader\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"object\": \"document:2021-budget\",         \"relation\": \"reader\",         \"user\": \"bob@auth0.com\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     },   ] } ``` This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`).  Note that the API will not return writers such as `anne@auth0.com` even when all writers are readers.  This is because only direct relationship are returned for the READ API. ### Query for all users with all relationships for a particular document To query for all users that have any relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {       \"object\": \"document:2021-budget\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"object\": \"document:2021-budget\",         \"relation\": \"writer\",         \"user\": \"anne@auth0.com\"       },       \"timestamp\": \"2021-10-05T13:42:12.356Z\"     },     {       \"key\": {         \"object\": \"document:2021-budget\",         \"relation\": \"reader\",         \"user\": \"bob@auth0.com\"       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     },   ] } ``` This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`) and 1 `writer` (`anne@auth0.com`). 
     * @summary Get tuples from the store that matches a query, without following userset rewrite rules
     * @param {SandcastleReadRequestParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandcastleApi
     */
    public read(body: SandcastleReadRequestParams, options?: any) {
        return SandcastleApiFp(this.configuration).read(body, options).then((request) => request(this.axios));
    }

    /**
     * The GET authorization-models by ID API will return a particular version of authorization model that had been configured for a certain store.   Path parameter `store_id` and `id` are required. The response will return the authorization model for the particular version.  ## Limits - Each store has a limit of **30** read authorization-models requests per minute (RPM). ## Example To retrieve the authorization model with ID `1yunpF9DkzXMzm0dHrsCuWsooEV` for the store, call the GET authorization-models by ID API with `1yunpF9DkzXMzm0dHrsCuWsooEV` as the `id` path parameter.  The API will return: ```json {   \"authorization_model\":{     \"id\":\"1yunpF9DkzXMzm0dHrsCuWsooEV\",     \"type_definitions\":{       \"type_definitions\":[         {           \"type\":\"document\",           \"relations\":{             \"reader\":{               \"union\":{                 \"child\":[                   {                     \"this\":{                      }                   },                   {                     \"computedUserset\":{                       \"object\":\"\",                       \"relation\":\"writer\"                     }                   }                 ]               }             },             \"writer\":{               \"this\":{                }             }           }         }       ]     }   } } ``` In the above example, there is only 1 type (`document`) with 2 relations (`writer` and `reader`).
     * @summary Return a particular version of an authorization model
     * @param {string} id The authorization model ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandcastleApi
     */
    public readAuthzModel(id: string, options?: any) {
        return SandcastleApiFp(this.configuration).readAuthzModel(id, options).then((request) => request(this.axios));
    }

    /**
     * The GET authorization-models API will return all the IDs of the authorization models for a certain store. Path parameter `store_id` is required. Sandcastle\'s response will contain an array of all authorization model IDs, sorted in descending order of creation.  ## Limits - Each store has a limit of **30** read authorization-models requests per minute (RPM). - Each response can contain up to **50** authorization model IDs. ## Example Assume that the store\'s authorization model has been configured twice.  To get all the IDs of the authorization models that had been created in this store, call GET authorization-models.  The API will return a response that looks like: ```json {   \"authorization_model_ids\": [       \"1yunpF9DkzXMzm0dHrsCuWsooEV\",       \"1yundoHpJHlodgn4EOVar2DhmKp\"   ] } ``` If there are more authorization model IDs available, the response will contain an extra field `continuation_token`: ```json {   \"authorization_model_ids\": [       \"1yunpF9DkzXMzm0dHrsCuWsooEV\",       \"1yundoHpJHlodgn4EOVar2DhmKp\"   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` 
     * @summary Check whether a user is authorized to access an object
     * @param {number} [pageSize] 
     * @param {string} [continuationToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandcastleApi
     */
    public readAuthzModels(pageSize?: number, continuationToken?: string, options?: any) {
        return SandcastleApiFp(this.configuration).readAuthzModels(pageSize, continuationToken, options).then((request) => request(this.axios));
    }

    /**
     * The GET settings API will return the store\'s settings, including environment tag and an array of Sandcastle\'s allowed 3rd party token issuers. The environment tag is used to differentiate between development, staging, and production environments.   Path parameter `store_id` is required. ## Example GET settings API\'s response looks like: ```json {   \"environment\":\"STAGING\",   \"token_issuers\":[     {       \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\",       \"issuer_url\":\"https://example.issuer.com\"     }   ] } ``` In the above response, the store is configured as STAGING and there is one allowed 3rd party token issuer `https://example.issuer.com`.
     * @summary Return store settings, including the environment tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandcastleApi
     */
    public readSettings(options?: any) {
        return SandcastleApiFp(this.configuration).readSettings(options).then((request) => request(this.axios));
    }

    /**
     * The POST write API will update the tuples for a certain store.  Tuples and type definitions allow Sandcastle to determine whether a relationship exists between an object and an user. Path parameter `store_id` is required.  In the body, `writes` adds new tuples while `deletes` remove existing tuples.  `lock_tuple` is reserved for future use.  ## Limits - Each write API call allows at most **25** tuples. - Each store has a limit of **50000** tuples. - Each store has a limit of **1** write requests per second (RPS). ## Example ### Adding relationships To add `anne@auth0.com` as a `writer` for `document:2021-budget`, call write API with the following  ```json {   \"writes\": {     \"tuple_keys\": [       {         \"object\": \"document:2021-budget\",         \"relation\": \"writer\",         \"user\": \"anne@auth0.com\"       }     ]   } } ``` ### Removing relationships To remove `bob@auth0.com` as a `reader` for `document:2021-budget`, call write API with the following  ```json {   \"deletes\": {     \"tuple_keys\": [       {         \"object\": \"document:2021-budget\",         \"relation\": \"reader\",         \"user\": \"bob@auth0.com\"       }     ]   } } ``` 
     * @summary Add or delete tuples from the store
     * @param {SandcastleWriteRequestParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandcastleApi
     */
    public write(body: SandcastleWriteRequestParams, options?: any) {
        return SandcastleApiFp(this.configuration).write(body, options).then((request) => request(this.axios));
    }

    /**
     * The POST authorization-model API will update the authorization model for a certain store. Path parameter `store_id` and `type_definitions` array in the body are required.  Each item in the `type_definitions` array is a type definition as specified in the field `type_definition`. The response will return the authorization model\'s ID in the `id` field.  ## Limits - There can be at most **10** items in the type_definitions array. - Each store can have at most **10** authorization models. - Each store has a limit of **10** POST authorization-models requests per minute (RPM). ## Example To update the authorization model with a single `document` authorization model, call POST authorization-models API with the body:  ```json {   \"type_definitions\":[     {       \"type\":\"document\",       \"relations\":{         \"reader\":{           \"union\":{             \"child\":[               {                 \"this\":{                  }               },               {                 \"computedUserset\":{                   \"object\":\"\",                   \"relation\":\"writer\"                 }               }             ]           }         },         \"writer\":{           \"this\":{            }         }       }     }   ] } ``` Sandcastle\'s response will include the version id for this authorization model, which will look like  ``` {\"authorization_model_id\": \"1yunpF9DkzXMzm0dHrsCuWsooEV\"} ``` 
     * @summary Create a new authorization model
     * @param {AuthzmodelTypeDefinitions} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandcastleApi
     */
    public writeAuthzModel(body: AuthzmodelTypeDefinitions, options?: any) {
        return SandcastleApiFp(this.configuration).writeAuthzModel(body, options).then((request) => request(this.axios));
    }

    /**
     * The PATCH settings API will update the environment tag to differentiate between development, staging, and production environments. Path parameter `store_id` is required. The response will return the updated environment tag as well as other configuration settings.  ## Example To update store\'s environment tag to `STAGING`, call PATCH settings API with the following with the body:  ```json {\"environment\": \"STAGING\"} ``` 
     * @summary Update the environment tag for a store
     * @param {SandcastleWriteSettingsRequestParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandcastleApi
     */
    public writeSettings(body: SandcastleWriteSettingsRequestParams, options?: any) {
        return SandcastleApiFp(this.configuration).writeSettings(body, options).then((request) => request(this.axios));
    }

    /**
     * The POST token-issuers API will configure system so that tokens issued by the specified 3rd party token issuer will be allowed for Sandcastle\'s read and write operations.  Otherwise, only tokens issued by Sandcastle\'s issuer (such as `sandcastle.us.auth0.com` and `sandcastle-dev.us.auth0.com`) are accepted by Sandcastle stores API.  Other tokens issued by providers external to Sandcastle will be rejected. An example use case is to have browsers directly calling Sandcastle API. Path parameter `store_id` as well as body parameter `issuer_url` are all required. ## Example To allow tokens issued by the 3rd party token issuer `https://example.issuer.com` for Sandcastle\'s read and write operations : 1. In the 3rd party issuer, configure Sandcastle API with the following audience (`https://api.staging.sandcastle.cloud`) in its issuer configuration. 2. Call POST token-issuers API with the body: `{\"issuer_url\": \"https://example.issuer.com\"}`  Sandcastle\'s response will include the id that is associated with the token issuer as well as the issuer url, and looks like  ```json {   \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\",   \"issuer_url\":\"https://example.issuer.com\" } ``` 
     * @summary Add 3rd party token issuer for Sandcastle read and write operations
     * @param {SandcastleWriteTokenIssuersRequestParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandcastleApi
     */
    public writeTokenIssuer(body: SandcastleWriteTokenIssuersRequestParams, options?: any) {
        return SandcastleApiFp(this.configuration).writeTokenIssuer(body, options).then((request) => request(this.axios));
    }
}


