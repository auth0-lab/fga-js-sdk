/* tslint:disable */
/* eslint-disable */
/**
 * Auth0 Fine Grained Authorization (FGA)
 * Auth0 Fine Grained Authorization (FGA) is an early-stage product we are building at Auth0 as part of Auth0Lab to solve fine-grained authorization at scale. If you are interested in learning more about our plans, please reach out via our Discord chat.  The limits and information described in this document is subject to change.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: https://discord.gg/8naAwJfWN6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

import { COLLECTION_FORMATS, BaseAPI } from './base';
import {
    DUMMY_BASE_URL,
    setBearerAuthToObject,
    setSearchParams,
    serializeDataIfNeeded,
    toPathString,
    createRequestFunction,
    RequestArgs,
    PromiseResult
} from './common';
import { assertParamExists, Configuration, RequiredError } from './configuration';

/**
 * 
 * @export
 * @interface Auth0FgaAssertion
 */
export interface Auth0FgaAssertion {
    /**
     * 
     * @type {Auth0FgaTupleKey}
     * @memberof Auth0FgaAssertion
     */
    tuple_key: Auth0FgaTupleKey;
    /**
     * 
     * @type {boolean}
     * @memberof Auth0FgaAssertion
     */
    expectation: boolean;
}
/**
 * 
 * @export
 * @interface Auth0FgaCheckRequestParams
 */
export interface Auth0FgaCheckRequestParams {
    /**
     * 
     * @type {Auth0FgaTupleKey}
     * @memberof Auth0FgaCheckRequestParams
     */
    tuple_key?: Auth0FgaTupleKey;
    /**
     * 
     * @type {string}
     * @memberof Auth0FgaCheckRequestParams
     */
    authorization_model_id?: string;
    /**
     * defaults to false. making it true has performance implications. only use for debugging purposes, etc.
     * @type {boolean}
     * @memberof Auth0FgaCheckRequestParams
     */
    trace?: boolean;
}
/**
 * 
 * @export
 * @interface Auth0FgaCheckResponse
 */
export interface Auth0FgaCheckResponse {
    /**
     * 
     * @type {boolean}
     * @memberof Auth0FgaCheckResponse
     */
    allowed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Auth0FgaCheckResponse
     */
    resolution?: string;
}
/**
 * 
 * @export
 * @interface Auth0FgaExpandRequestParams
 */
export interface Auth0FgaExpandRequestParams {
    /**
     * 
     * @type {Auth0FgaTupleKey}
     * @memberof Auth0FgaExpandRequestParams
     */
    tuple_key?: Auth0FgaTupleKey;
    /**
     * 
     * @type {string}
     * @memberof Auth0FgaExpandRequestParams
     */
    authorization_model_id?: string;
}
/**
 * 
 * @export
 * @interface Auth0FgaExpandResponse
 */
export interface Auth0FgaExpandResponse {
    /**
     * 
     * @type {Auth0FgaUsersetTree}
     * @memberof Auth0FgaExpandResponse
     */
    tree?: Auth0FgaUsersetTree;
}
/**
 * 
 * @export
 * @interface Auth0FgaReadAssertionsResponse
 */
export interface Auth0FgaReadAssertionsResponse {
    /**
     * The authorization model ID
     * @type {string}
     * @memberof Auth0FgaReadAssertionsResponse
     */
    authorization_model_id?: string;
    /**
     * 
     * @type {Array<Auth0FgaAssertion>}
     * @memberof Auth0FgaReadAssertionsResponse
     */
    assertions?: Array<Auth0FgaAssertion>;
}
/**
 * 
 * @export
 * @interface Auth0FgaReadAuthorizationModelResponse
 */
export interface Auth0FgaReadAuthorizationModelResponse {
    /**
     * 
     * @type {AuthorizationmodelAuthorizationModel}
     * @memberof Auth0FgaReadAuthorizationModelResponse
     */
    authorization_model?: AuthorizationmodelAuthorizationModel;
}
/**
 * 
 * @export
 * @interface Auth0FgaReadAuthorizationModelsResponse
 */
export interface Auth0FgaReadAuthorizationModelsResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof Auth0FgaReadAuthorizationModelsResponse
     */
    authorization_model_ids?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Auth0FgaReadAuthorizationModelsResponse
     */
    continuation_token?: string;
}
/**
 * 
 * @export
 * @interface Auth0FgaReadRequestParams
 */
export interface Auth0FgaReadRequestParams {
    /**
     * 
     * @type {Auth0FgaTupleKey}
     * @memberof Auth0FgaReadRequestParams
     */
    tuple_key?: Auth0FgaTupleKey;
    /**
     * 
     * @type {string}
     * @memberof Auth0FgaReadRequestParams
     */
    authorization_model_id?: string;
}
/**
 * 
 * @export
 * @interface Auth0FgaReadResponse
 */
export interface Auth0FgaReadResponse {
    /**
     * 
     * @type {Array<Auth0FgaTuple>}
     * @memberof Auth0FgaReadResponse
     */
    tuples?: Array<Auth0FgaTuple>;
}
/**
 * 
 * @export
 * @interface Auth0FgaTuple
 */
export interface Auth0FgaTuple {
    /**
     * 
     * @type {Auth0FgaTupleKey}
     * @memberof Auth0FgaTuple
     */
    key?: Auth0FgaTupleKey;
    /**
     * 
     * @type {string}
     * @memberof Auth0FgaTuple
     */
    timestamp?: string;
}
/**
 * 
 * @export
 * @interface Auth0FgaTupleKey
 */
export interface Auth0FgaTupleKey {
    /**
     * 
     * @type {string}
     * @memberof Auth0FgaTupleKey
     */
    object?: string;
    /**
     * 
     * @type {string}
     * @memberof Auth0FgaTupleKey
     */
    relation?: string;
    /**
     * 
     * @type {string}
     * @memberof Auth0FgaTupleKey
     */
    user?: string;
}
/**
 * 
 * @export
 * @interface Auth0FgaTupleKeys
 */
export interface Auth0FgaTupleKeys {
    /**
     * 
     * @type {Array<Auth0FgaTupleKey>}
     * @memberof Auth0FgaTupleKeys
     */
    tuple_keys: Array<Auth0FgaTupleKey>;
}
/**
 * A UsersetTree contains the result of an Expansion.
 * @export
 * @interface Auth0FgaUsersetTree
 */
export interface Auth0FgaUsersetTree {
    /**
     * 
     * @type {UsersetTreeNode}
     * @memberof Auth0FgaUsersetTree
     */
    root?: UsersetTreeNode;
}
/**
 * 
 * @export
 * @interface Auth0FgaUsersetTreeDifference
 */
export interface Auth0FgaUsersetTreeDifference {
    /**
     * 
     * @type {UsersetTreeNode}
     * @memberof Auth0FgaUsersetTreeDifference
     */
    base?: UsersetTreeNode;
    /**
     * 
     * @type {UsersetTreeNode}
     * @memberof Auth0FgaUsersetTreeDifference
     */
    subtract?: UsersetTreeNode;
}
/**
 * 
 * @export
 * @interface Auth0FgaUsersetTreeTupleToUserset
 */
export interface Auth0FgaUsersetTreeTupleToUserset {
    /**
     * 
     * @type {string}
     * @memberof Auth0FgaUsersetTreeTupleToUserset
     */
    tupleset?: string;
    /**
     * 
     * @type {Array<UsersetTreeComputed>}
     * @memberof Auth0FgaUsersetTreeTupleToUserset
     */
    computed?: Array<UsersetTreeComputed>;
}
/**
 * 
 * @export
 * @interface Auth0FgaWriteAssertionsRequestParams
 */
export interface Auth0FgaWriteAssertionsRequestParams {
    /**
     * 
     * @type {Array<Auth0FgaAssertion>}
     * @memberof Auth0FgaWriteAssertionsRequestParams
     */
    assertions: Array<Auth0FgaAssertion>;
}
/**
 * 
 * @export
 * @interface Auth0FgaWriteAuthorizationModelResponse
 */
export interface Auth0FgaWriteAuthorizationModelResponse {
    /**
     * 
     * @type {string}
     * @memberof Auth0FgaWriteAuthorizationModelResponse
     */
    authorization_model_id?: string;
}
/**
 * 
 * @export
 * @interface Auth0FgaWriteRequestParams
 */
export interface Auth0FgaWriteRequestParams {
    /**
     * 
     * @type {Auth0FgaTupleKeys}
     * @memberof Auth0FgaWriteRequestParams
     */
    writes?: Auth0FgaTupleKeys;
    /**
     * 
     * @type {Auth0FgaTupleKeys}
     * @memberof Auth0FgaWriteRequestParams
     */
    deletes?: Auth0FgaTupleKeys;
    /**
     * 
     * @type {string}
     * @memberof Auth0FgaWriteRequestParams
     */
    authorization_model_id?: string;
    /**
     * 
     * @type {Auth0FgaTuple}
     * @memberof Auth0FgaWriteRequestParams
     */
    lock_tuple?: Auth0FgaTuple;
}
/**
 * 
 * @export
 * @interface Auth0FgaWriteSettingsRequestParams
 */
export interface Auth0FgaWriteSettingsRequestParams {
    /**
     * 
     * @type {SettingsEnvironment}
     * @memberof Auth0FgaWriteSettingsRequestParams
     */
    environment?: SettingsEnvironment;
}
/**
 * 
 * @export
 * @interface Auth0FgaWriteTokenIssuersRequestParams
 */
export interface Auth0FgaWriteTokenIssuersRequestParams {
    /**
     * 
     * @type {string}
     * @memberof Auth0FgaWriteTokenIssuersRequestParams
     */
    issuer_url?: string;
}
/**
 * 
 * @export
 * @interface AuthorizationmodelAuthorizationModel
 */
export interface AuthorizationmodelAuthorizationModel {
    /**
     * 
     * @type {string}
     * @memberof AuthorizationmodelAuthorizationModel
     */
    id?: string;
    /**
     * 
     * @type {Array<AuthorizationmodelTypeDefinition>}
     * @memberof AuthorizationmodelAuthorizationModel
     */
    type_definitions?: Array<AuthorizationmodelTypeDefinition>;
}
/**
 * 
 * @export
 * @interface AuthorizationmodelDifference
 */
export interface AuthorizationmodelDifference {
    /**
     * 
     * @type {AuthorizationmodelUserset}
     * @memberof AuthorizationmodelDifference
     */
    base: AuthorizationmodelUserset;
    /**
     * 
     * @type {AuthorizationmodelUserset}
     * @memberof AuthorizationmodelDifference
     */
    subtract: AuthorizationmodelUserset;
}
/**
 * 
 * @export
 * @interface AuthorizationmodelObjectRelation
 */
export interface AuthorizationmodelObjectRelation {
    /**
     * 
     * @type {string}
     * @memberof AuthorizationmodelObjectRelation
     */
    object?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationmodelObjectRelation
     */
    relation?: string;
}
/**
 * 
 * @export
 * @interface AuthorizationmodelTupleToUserset
 */
export interface AuthorizationmodelTupleToUserset {
    /**
     * 
     * @type {AuthorizationmodelObjectRelation}
     * @memberof AuthorizationmodelTupleToUserset
     */
    tupleset?: AuthorizationmodelObjectRelation;
    /**
     * 
     * @type {AuthorizationmodelObjectRelation}
     * @memberof AuthorizationmodelTupleToUserset
     */
    computedUserset?: AuthorizationmodelObjectRelation;
}
/**
 * 
 * @export
 * @interface AuthorizationmodelTypeDefinition
 */
export interface AuthorizationmodelTypeDefinition {
    /**
     * 
     * @type {string}
     * @memberof AuthorizationmodelTypeDefinition
     */
    type: string;
    /**
     * 
     * @type {{ [key: string]: AuthorizationmodelUserset; }}
     * @memberof AuthorizationmodelTypeDefinition
     */
    relations: { [key: string]: AuthorizationmodelUserset; };
}
/**
 * 
 * @export
 * @interface AuthorizationmodelTypeDefinitions
 */
export interface AuthorizationmodelTypeDefinitions {
    /**
     * 
     * @type {Array<AuthorizationmodelTypeDefinition>}
     * @memberof AuthorizationmodelTypeDefinitions
     */
    type_definitions?: Array<AuthorizationmodelTypeDefinition>;
}
/**
 * 
 * @export
 * @interface AuthorizationmodelUserset
 */
export interface AuthorizationmodelUserset {
    /**
     * A DirectUserset is a sentinel message for referencing the direct members specified by an object/relation mapping.
     * @type {object}
     * @memberof AuthorizationmodelUserset
     */
    _this?: object;
    /**
     * 
     * @type {AuthorizationmodelObjectRelation}
     * @memberof AuthorizationmodelUserset
     */
    computedUserset?: AuthorizationmodelObjectRelation;
    /**
     * 
     * @type {AuthorizationmodelTupleToUserset}
     * @memberof AuthorizationmodelUserset
     */
    tupleToUserset?: AuthorizationmodelTupleToUserset;
    /**
     * 
     * @type {AuthorizationmodelUsersets}
     * @memberof AuthorizationmodelUserset
     */
    union?: AuthorizationmodelUsersets;
    /**
     * 
     * @type {AuthorizationmodelUsersets}
     * @memberof AuthorizationmodelUserset
     */
    intersection?: AuthorizationmodelUsersets;
    /**
     * 
     * @type {AuthorizationmodelDifference}
     * @memberof AuthorizationmodelUserset
     */
    difference?: AuthorizationmodelDifference;
}
/**
 * 
 * @export
 * @interface AuthorizationmodelUsersets
 */
export interface AuthorizationmodelUsersets {
    /**
     * 
     * @type {Array<AuthorizationmodelUserset>}
     * @memberof AuthorizationmodelUsersets
     */
    child?: Array<AuthorizationmodelUserset>;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    typeUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    message?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    details?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum SettingsEnvironment {
    EnvironmentUnspecified = 'ENVIRONMENT_UNSPECIFIED',
    Development = 'DEVELOPMENT',
    Staging = 'STAGING',
    Production = 'PRODUCTION'
}

/**
 * 
 * @export
 * @interface SettingsSettings
 */
export interface SettingsSettings {
    /**
     * 
     * @type {SettingsEnvironment}
     * @memberof SettingsSettings
     */
    environment?: SettingsEnvironment;
    /**
     * 
     * @type {Array<SettingsTokenIssuer>}
     * @memberof SettingsSettings
     */
    token_issuers?: Array<SettingsTokenIssuer>;
}
/**
 * 
 * @export
 * @interface SettingsTokenIssuer
 */
export interface SettingsTokenIssuer {
    /**
     * 
     * @type {string}
     * @memberof SettingsTokenIssuer
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SettingsTokenIssuer
     */
    issuer_url?: string;
}
/**
 * 
 * @export
 * @interface UsersetTreeComputed
 */
export interface UsersetTreeComputed {
    /**
     * 
     * @type {string}
     * @memberof UsersetTreeComputed
     */
    userset?: string;
}
/**
 * A leaf node contains either  - a set of users (which may be individual users, or usersets   referencing other relations - a computed node, which is the result of a computed userset   value in the authorization model - a tupleToUserset nodes, containing the result of expanding   a tupleToUserset value in a authorization model.
 * @export
 * @interface UsersetTreeLeaf
 */
export interface UsersetTreeLeaf {
    /**
     * 
     * @type {UsersetTreeUsers}
     * @memberof UsersetTreeLeaf
     */
    users?: UsersetTreeUsers;
    /**
     * 
     * @type {UsersetTreeComputed}
     * @memberof UsersetTreeLeaf
     */
    computed?: UsersetTreeComputed;
    /**
     * 
     * @type {Auth0FgaUsersetTreeTupleToUserset}
     * @memberof UsersetTreeLeaf
     */
    tupleToUserset?: Auth0FgaUsersetTreeTupleToUserset;
}
/**
 * 
 * @export
 * @interface UsersetTreeNode
 */
export interface UsersetTreeNode {
    /**
     * 
     * @type {string}
     * @memberof UsersetTreeNode
     */
    name?: string;
    /**
     * 
     * @type {UsersetTreeLeaf}
     * @memberof UsersetTreeNode
     */
    leaf?: UsersetTreeLeaf;
    /**
     * 
     * @type {Auth0FgaUsersetTreeDifference}
     * @memberof UsersetTreeNode
     */
    difference?: Auth0FgaUsersetTreeDifference;
    /**
     * 
     * @type {UsersetTreeNodes}
     * @memberof UsersetTreeNode
     */
    union?: UsersetTreeNodes;
    /**
     * 
     * @type {UsersetTreeNodes}
     * @memberof UsersetTreeNode
     */
    intersection?: UsersetTreeNodes;
}
/**
 * 
 * @export
 * @interface UsersetTreeNodes
 */
export interface UsersetTreeNodes {
    /**
     * 
     * @type {Array<UsersetTreeNode>}
     * @memberof UsersetTreeNodes
     */
    nodes?: Array<UsersetTreeNode>;
}
/**
 * 
 * @export
 * @interface UsersetTreeUsers
 */
export interface UsersetTreeUsers {
    /**
     * 
     * @type {Array<string>}
     * @memberof UsersetTreeUsers
     */
    users?: Array<string>;
}

/**
 * Auth0FgaApi - axios parameter creator
 * @export
 */
export const Auth0FgaApiAxiosParamCreator = function (configuration: Configuration) {
    return {
        /**
         * The check API will return whether the user has a certain relationship with an object in a certain store. Path parameter `store_id` as well as body parameter `object`, `relation` and `user` are all required. The response will return whether the relationship exists in the field `allowed`.  ## Limits - Each store has a limit of **50** check requests per second (RPS). ## Example In order to check if user `anne@auth0.com` has an owner relationship with object document:2021-budget, a check API call should be fired with the following body ```json {   \"tuple_key\": {     \"user\": \"anne@auth0.com\"     \"relation\": \"owner\"     \"object\": \"document:2021-budget\",   } } ``` Auth0 FGA\'s response will include `{ \"allowed\": true }` if there is a relationship and `{ \"allowed\": false }` if there isn\'t.
         * @summary Check whether a user is authorized to access an object
         * @param {Auth0FgaCheckRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check: async (body: Auth0FgaCheckRequestParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('check', 'body', body)
            const localVarPath = `/{store_id}/check`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The DELETE token-issuers API will remove the 3rd party token issuer as a token issuer that are allowed by Auth0 FGA.  The specified id is the id associated with the issuer url that is to be removed. Path parameter `store_id` and `id` are all required. ## Example To remove the 3rd party token issuer `https://example.issuer.com` (which has the id `0ujsszwN8NRY24YaXiTIE2VWDTS`), call DELETE token-issuers API with the path parameter id `0ujsszwN8NRY24YaXiTIE2VWDTS`.
         * @summary Remove 3rd party token issuer for Auth0 FGA read and write operation
         * @param {string} id Id of token issuer to be removed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTokenIssuer: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTokenIssuer', 'id', id)
            const localVarPath = `/{store_id}/settings/token-issuers/{id}`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
                        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The expand API will return all users (including user and userset) that have certain relationship with an object in a certain store. This is different from the `/{store_id}/read` API in that both direct and indirect references are returned. Path parameter `store_id` as well as body parameter `object`, `relation` are all required. The response will return a userset tree whose leaves are the user id and usersets.  Union, intersection and difference operator are located in the intermediate nodes.  ## Limits - Each store has a limit of **30** expand requests per minute (RPM). ## Example Assume the following type definition for document: ```yaml   type document     relations       define reader as self or writer       define writer as self ``` In order to expand all users that have `reader` relationship with object `document:2021-budget`, an expand API call should be fired with the following body ```json {   \"tuple_key\": {     \"object\": \"document:2021-budget\",     \"relation\": \"reader\"   } } ``` Auth0 FGA\'s response will be a userset tree of the users and computed usersets that have read access to the document. ```json {   \"tree\":{     \"root\":{       \"type\":\"document:2021-budget#reader\",       \"union\":{         \"nodes\":[           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"users\":{                 \"users\":[                   \"bob@auth0.com\"                 ]               }             }           },           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"computed\":{                 \"userset\":\"document:2021-budget#writer\"               }             }           }         ]       }     }   } } ``` The caller can then call expand API for the `writer` relationship for the `document:2021-budget`.
         * @summary Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship
         * @param {Auth0FgaExpandRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expand: async (body: Auth0FgaExpandRequestParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('expand', 'body', body)
            const localVarPath = `/{store_id}/expand`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The POST read API will return the tuples for a certain store that matches a query filter specified in the body. Tuples and type definitions allow Auth0 FGA to determine whether a relationship exists between an object and an user. It is different from the `/{store_id}/expand` API in that only direct relationships are returned. Path parameter `store_id` is required.  In the body: 1. Object is mandatory. An object can be a full object (e.g., `type:object_id`) or type only (e.g., `type:`). 2. User is mandatory in the case the object is type only. ## Limits - Each store has a limit of **2** read requests per second (RPS). ## Examples ### Query for all objects in a type definition To query for all objects that `bob@auth0.com` has `reader` relationship in the document type definition, call read API with body of  ```json {  \"tuple_key\": {      \"user\": \"bob@auth0.com\"      \"relation\": \"reader\",      \"object\": \"document:\",   } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"bob@auth0.com\"         \"relation\": \"reader\",         \"object\": \"document:2021-budget\",       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ] } ``` This means that `bob@auth0.com` has a `reader` relationship with 1 document `document:2021-budget`. ### Query for all users with particular relationships for a particular document To query for all users that have `reader` relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {      \"object\": \"document:2021-budget\",      \"relation\": \"reader\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"bob@auth0.com\"         \"relation\": \"reader\",         \"object\": \"document:2021-budget\",       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ] } ``` This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`).  Note that the API will not return writers such as `anne@auth0.com` even when all writers are readers.  This is because only direct relationship are returned for the READ API. ### Query for all users with all relationships for a particular document To query for all users that have any relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {       \"object\": \"document:2021-budget\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"anne@auth0.com\"         \"relation\": \"writer\",         \"object\": \"document:2021-budget\",       },       \"timestamp\": \"2021-10-05T13:42:12.356Z\"     },     {       \"key\": {         \"user\": \"bob@auth0.com\"         \"relation\": \"reader\",         \"object\": \"document:2021-budget\",       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ] } ``` This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`) and 1 `writer` (`anne@auth0.com`). 
         * @summary Get tuples from the store that matches a query, without following userset rewrite rules
         * @param {Auth0FgaReadRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        read: async (body: Auth0FgaReadRequestParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('read', 'body', body)
            const localVarPath = `/{store_id}/read`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The GET assertions API will return, for a given authorization model id, all the assertions stored for it. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false. 
         * @summary Read assertions for an authorization model ID
         * @param {string} authorizationModelId The authorization model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAssertions: async (authorizationModelId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizationModelId' is not null or undefined
            assertParamExists('readAssertions', 'authorizationModelId', authorizationModelId)
            const localVarPath = `/{store_id}/assertions/{authorization_model_id}`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
                        .replace(`{${"authorization_model_id"}}`, encodeURIComponent(String(authorizationModelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The GET authorization-models by ID API will return a particular version of authorization model that had been configured for a certain store.   Path parameter `store_id` and `id` are required. The response will return the authorization model for the particular version.  ## Limits - Each store has a limit of **30** read authorization-models requests per minute (RPM). ## Example To retrieve the authorization model with ID `1yunpF9DkzXMzm0dHrsCuWsooEV` for the store, call the GET authorization-models by ID API with `1yunpF9DkzXMzm0dHrsCuWsooEV` as the `id` path parameter.  The API will return: ```json {   \"authorization_model\":{     \"id\":\"1yunpF9DkzXMzm0dHrsCuWsooEV\",     \"type_definitions\":[       {         \"type\":\"document\",         \"relations\":{           \"reader\":{             \"union\":{               \"child\":[                 {                   \"this\":{}                 },                 {                   \"computedUserset\":{                     \"object\":\"\",                     \"relation\":\"writer\"                   }                 }               ]             }           },           \"writer\":{             \"this\":{}           }         }       }     ]   } } ``` In the above example, there is only 1 type (`document`) with 2 relations (`writer` and `reader`).
         * @summary Return a particular version of an authorization model
         * @param {string} id The authorization model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAuthorizationModel: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('readAuthorizationModel', 'id', id)
            const localVarPath = `/{store_id}/authorization-models/{id}`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
                        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The GET authorization-models API will return all the IDs of the authorization models for a certain store. Path parameter `store_id` is required. Auth0 FGA\'s response will contain an array of all authorization model IDs, sorted in descending order of creation.  ## Limits - Each store has a limit of **30** read authorization-models requests per minute (RPM). - Each response can contain up to **50** authorization model IDs. ## Example Assume that the store\'s authorization model has been configured twice.  To get all the IDs of the authorization models that had been created in this store, call GET authorization-models.  The API will return a response that looks like: ```json {   \"authorization_model_ids\": [       \"1yunpF9DkzXMzm0dHrsCuWsooEV\",       \"1yundoHpJHlodgn4EOVar2DhmKp\"   ] } ``` If there are more authorization model IDs available, the response will contain an extra field `continuation_token`: ```json {   \"authorization_model_ids\": [       \"1yunpF9DkzXMzm0dHrsCuWsooEV\",       \"1yundoHpJHlodgn4EOVar2DhmKp\"   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` 
         * @summary Return all the authorization model IDs for a particular store
         * @param {number} [pageSize] 
         * @param {string} [continuationToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAuthorizationModels: async (pageSize?: number, continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/{store_id}/authorization-models`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuation_token'] = continuationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The GET settings API will return the store\'s settings, including environment tag and an array of Auth0 FGA\'s allowed 3rd party token issuers. The environment tag is used to differentiate between development, staging, and production environments.   Path parameter `store_id` is required. ## Example GET settings API\'s response looks like: ```json {   \"environment\":\"STAGING\",   \"token_issuers\":[     {       \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\",       \"issuer_url\":\"https://example.issuer.com\"     }   ] } ``` In the above response, the store is configured as STAGING and there is one allowed 3rd party token issuer `https://example.issuer.com`.
         * @summary Return store settings, including the environment tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/{store_id}/settings`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The POST write API will update the tuples for a certain store.  Tuples and type definitions allow Auth0 FGA to determine whether a relationship exists between an object and an user. Path parameter `store_id` is required.  In the body, `writes` adds new tuples while `deletes` remove existing tuples.  `lock_tuple` is reserved for future use.  ## Limits - Each write API call allows at most **25** tuples. - Each store has a limit of **50000** tuples. - Each store has a limit of **1** write requests per second (RPS). ## Example ### Adding relationships To add `anne@auth0.com` as a `writer` for `document:2021-budget`, call write API with the following  ```json {   \"writes\": {     \"tuple_keys\": [       {         \"user\": \"anne@auth0.com\"         \"relation\": \"writer\",         \"object\": \"document:2021-budget\",       }     ]   } } ``` ### Removing relationships To remove `bob@auth0.com` as a `reader` for `document:2021-budget`, call write API with the following  ```json {   \"deletes\": {     \"tuple_keys\": [       {         \"user\": \"bob@auth0.com\"         \"relation\": \"reader\",         \"object\": \"document:2021-budget\",       }     ]   } } ``` 
         * @summary Add or delete tuples from the store
         * @param {Auth0FgaWriteRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        write: async (body: Auth0FgaWriteRequestParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('write', 'body', body)
            const localVarPath = `/{store_id}/write`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The POST assertions API will add new assertions for an authorization model id, or overwrite the existing ones. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false. 
         * @summary Upsert assertions for an authorization model ID
         * @param {string} authorizationModelId The authorization model ID
         * @param {Auth0FgaWriteAssertionsRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeAssertions: async (authorizationModelId: string, body: Auth0FgaWriteAssertionsRequestParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizationModelId' is not null or undefined
            assertParamExists('writeAssertions', 'authorizationModelId', authorizationModelId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('writeAssertions', 'body', body)
            const localVarPath = `/{store_id}/assertions/{authorization_model_id}`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
                        .replace(`{${"authorization_model_id"}}`, encodeURIComponent(String(authorizationModelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The POST authorization-model API will update the authorization model for a certain store. Path parameter `store_id` and `type_definitions` array in the body are required.  Each item in the `type_definitions` array is a type definition as specified in the field `type_definition`. The response will return the authorization model\'s ID in the `id` field.  ## Limits - There can be at most **10** items in the type_definitions array. - Each store can have at most **10** authorization models. - Each store has a limit of **10** POST authorization-models requests per minute (RPM). ## Example To update the authorization model with a single `document` authorization model, call POST authorization-models API with the body:  ```json {   \"type_definitions\":[     {       \"type\":\"document\",       \"relations\":{         \"reader\":{           \"union\":{             \"child\":[               {                 \"this\":{                  }               },               {                 \"computedUserset\":{                   \"object\":\"\",                   \"relation\":\"writer\"                 }               }             ]           }         },         \"writer\":{           \"this\":{            }         }       }     }   ] } ``` Auth0 FGA\'s response will include the version id for this authorization model, which will look like  ``` {\"authorization_model_id\": \"1yunpF9DkzXMzm0dHrsCuWsooEV\"} ``` 
         * @summary Create a new authorization model
         * @param {AuthorizationmodelTypeDefinitions} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeAuthorizationModel: async (body: AuthorizationmodelTypeDefinitions, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('writeAuthorizationModel', 'body', body)
            const localVarPath = `/{store_id}/authorization-models`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The PATCH settings API will update the environment tag to differentiate between development, staging, and production environments. Path parameter `store_id` is required. The response will return the updated environment tag as well as other configuration settings.  ## Example To update store\'s environment tag to `STAGING`, call PATCH settings API with the following with the body:  ```json {\"environment\": \"STAGING\"} ``` 
         * @summary Update the environment tag for a store
         * @param {Auth0FgaWriteSettingsRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeSettings: async (body: Auth0FgaWriteSettingsRequestParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('writeSettings', 'body', body)
            const localVarPath = `/{store_id}/settings`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The POST token-issuers API will configure system so that tokens issued by the specified 3rd party token issuer will be allowed for Auth0 FGA\'s read and write operations.  Otherwise, only tokens issued by Auth0 FGA\'s issuer (such as `auth0Fga.us.auth0.com` and `auth0Fga-dev.us.auth0.com`) are accepted by Auth0 FGA stores API.  Other tokens issued by providers external to Auth0 FGA will be rejected. An example use case is to have browsers directly calling Auth0 FGA API. Path parameter `store_id` as well as body parameter `issuer_url` are all required. ## Example To allow tokens issued by the 3rd party token issuer `https://example.issuer.com` for Auth0 FGA\'s read and write operations : 1. In the 3rd party issuer, configure Auth0 FGA API with the following audience (`https://api.staging.fga.dev`) in its issuer configuration. 2. Call POST token-issuers API with the body: `{\"issuer_url\": \"https://example.issuer.com\"}`  Auth0 FGA\'s response will include the id that is associated with the token issuer as well as the issuer url, and looks like  ```json {   \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\",   \"issuer_url\":\"https://example.issuer.com\" } ``` 
         * @summary Add 3rd party token issuer for Auth0 FGA read and write operations
         * @param {Auth0FgaWriteTokenIssuersRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeTokenIssuer: async (body: Auth0FgaWriteTokenIssuersRequestParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('writeTokenIssuer', 'body', body)
            const localVarPath = `/{store_id}/settings/token-issuers`
            .replace(`{${"store_id"}}`, encodeURIComponent(String(configuration.storeId)))
            ;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Auth0FgaApi - functional programming interface
 * @export
 */
export const Auth0FgaApiFp = function(configuration: Configuration) {
    const localVarAxiosParamCreator = Auth0FgaApiAxiosParamCreator(configuration)
    return {
        /**
         * The check API will return whether the user has a certain relationship with an object in a certain store. Path parameter `store_id` as well as body parameter `object`, `relation` and `user` are all required. The response will return whether the relationship exists in the field `allowed`.  ## Limits - Each store has a limit of **50** check requests per second (RPS). ## Example In order to check if user `anne@auth0.com` has an owner relationship with object document:2021-budget, a check API call should be fired with the following body ```json {   \"tuple_key\": {     \"user\": \"anne@auth0.com\"     \"relation\": \"owner\"     \"object\": \"document:2021-budget\",   } } ``` Auth0 FGA\'s response will include `{ \"allowed\": true }` if there is a relationship and `{ \"allowed\": false }` if there isn\'t.
         * @summary Check whether a user is authorized to access an object
         * @param {Auth0FgaCheckRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async check(body: Auth0FgaCheckRequestParams, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<Auth0FgaCheckResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.check(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The DELETE token-issuers API will remove the 3rd party token issuer as a token issuer that are allowed by Auth0 FGA.  The specified id is the id associated with the issuer url that is to be removed. Path parameter `store_id` and `id` are all required. ## Example To remove the 3rd party token issuer `https://example.issuer.com` (which has the id `0ujsszwN8NRY24YaXiTIE2VWDTS`), call DELETE token-issuers API with the path parameter id `0ujsszwN8NRY24YaXiTIE2VWDTS`.
         * @summary Remove 3rd party token issuer for Auth0 FGA read and write operation
         * @param {string} id Id of token issuer to be removed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTokenIssuer(id: string, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTokenIssuer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The expand API will return all users (including user and userset) that have certain relationship with an object in a certain store. This is different from the `/{store_id}/read` API in that both direct and indirect references are returned. Path parameter `store_id` as well as body parameter `object`, `relation` are all required. The response will return a userset tree whose leaves are the user id and usersets.  Union, intersection and difference operator are located in the intermediate nodes.  ## Limits - Each store has a limit of **30** expand requests per minute (RPM). ## Example Assume the following type definition for document: ```yaml   type document     relations       define reader as self or writer       define writer as self ``` In order to expand all users that have `reader` relationship with object `document:2021-budget`, an expand API call should be fired with the following body ```json {   \"tuple_key\": {     \"object\": \"document:2021-budget\",     \"relation\": \"reader\"   } } ``` Auth0 FGA\'s response will be a userset tree of the users and computed usersets that have read access to the document. ```json {   \"tree\":{     \"root\":{       \"type\":\"document:2021-budget#reader\",       \"union\":{         \"nodes\":[           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"users\":{                 \"users\":[                   \"bob@auth0.com\"                 ]               }             }           },           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"computed\":{                 \"userset\":\"document:2021-budget#writer\"               }             }           }         ]       }     }   } } ``` The caller can then call expand API for the `writer` relationship for the `document:2021-budget`.
         * @summary Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship
         * @param {Auth0FgaExpandRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expand(body: Auth0FgaExpandRequestParams, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<Auth0FgaExpandResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expand(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The POST read API will return the tuples for a certain store that matches a query filter specified in the body. Tuples and type definitions allow Auth0 FGA to determine whether a relationship exists between an object and an user. It is different from the `/{store_id}/expand` API in that only direct relationships are returned. Path parameter `store_id` is required.  In the body: 1. Object is mandatory. An object can be a full object (e.g., `type:object_id`) or type only (e.g., `type:`). 2. User is mandatory in the case the object is type only. ## Limits - Each store has a limit of **2** read requests per second (RPS). ## Examples ### Query for all objects in a type definition To query for all objects that `bob@auth0.com` has `reader` relationship in the document type definition, call read API with body of  ```json {  \"tuple_key\": {      \"user\": \"bob@auth0.com\"      \"relation\": \"reader\",      \"object\": \"document:\",   } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"bob@auth0.com\"         \"relation\": \"reader\",         \"object\": \"document:2021-budget\",       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ] } ``` This means that `bob@auth0.com` has a `reader` relationship with 1 document `document:2021-budget`. ### Query for all users with particular relationships for a particular document To query for all users that have `reader` relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {      \"object\": \"document:2021-budget\",      \"relation\": \"reader\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"bob@auth0.com\"         \"relation\": \"reader\",         \"object\": \"document:2021-budget\",       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ] } ``` This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`).  Note that the API will not return writers such as `anne@auth0.com` even when all writers are readers.  This is because only direct relationship are returned for the READ API. ### Query for all users with all relationships for a particular document To query for all users that have any relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {       \"object\": \"document:2021-budget\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"anne@auth0.com\"         \"relation\": \"writer\",         \"object\": \"document:2021-budget\",       },       \"timestamp\": \"2021-10-05T13:42:12.356Z\"     },     {       \"key\": {         \"user\": \"bob@auth0.com\"         \"relation\": \"reader\",         \"object\": \"document:2021-budget\",       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ] } ``` This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`) and 1 `writer` (`anne@auth0.com`). 
         * @summary Get tuples from the store that matches a query, without following userset rewrite rules
         * @param {Auth0FgaReadRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async read(body: Auth0FgaReadRequestParams, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<Auth0FgaReadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.read(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The GET assertions API will return, for a given authorization model id, all the assertions stored for it. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false. 
         * @summary Read assertions for an authorization model ID
         * @param {string} authorizationModelId The authorization model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAssertions(authorizationModelId: string, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<Auth0FgaReadAssertionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAssertions(authorizationModelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The GET authorization-models by ID API will return a particular version of authorization model that had been configured for a certain store.   Path parameter `store_id` and `id` are required. The response will return the authorization model for the particular version.  ## Limits - Each store has a limit of **30** read authorization-models requests per minute (RPM). ## Example To retrieve the authorization model with ID `1yunpF9DkzXMzm0dHrsCuWsooEV` for the store, call the GET authorization-models by ID API with `1yunpF9DkzXMzm0dHrsCuWsooEV` as the `id` path parameter.  The API will return: ```json {   \"authorization_model\":{     \"id\":\"1yunpF9DkzXMzm0dHrsCuWsooEV\",     \"type_definitions\":[       {         \"type\":\"document\",         \"relations\":{           \"reader\":{             \"union\":{               \"child\":[                 {                   \"this\":{}                 },                 {                   \"computedUserset\":{                     \"object\":\"\",                     \"relation\":\"writer\"                   }                 }               ]             }           },           \"writer\":{             \"this\":{}           }         }       }     ]   } } ``` In the above example, there is only 1 type (`document`) with 2 relations (`writer` and `reader`).
         * @summary Return a particular version of an authorization model
         * @param {string} id The authorization model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAuthorizationModel(id: string, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<Auth0FgaReadAuthorizationModelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAuthorizationModel(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The GET authorization-models API will return all the IDs of the authorization models for a certain store. Path parameter `store_id` is required. Auth0 FGA\'s response will contain an array of all authorization model IDs, sorted in descending order of creation.  ## Limits - Each store has a limit of **30** read authorization-models requests per minute (RPM). - Each response can contain up to **50** authorization model IDs. ## Example Assume that the store\'s authorization model has been configured twice.  To get all the IDs of the authorization models that had been created in this store, call GET authorization-models.  The API will return a response that looks like: ```json {   \"authorization_model_ids\": [       \"1yunpF9DkzXMzm0dHrsCuWsooEV\",       \"1yundoHpJHlodgn4EOVar2DhmKp\"   ] } ``` If there are more authorization model IDs available, the response will contain an extra field `continuation_token`: ```json {   \"authorization_model_ids\": [       \"1yunpF9DkzXMzm0dHrsCuWsooEV\",       \"1yundoHpJHlodgn4EOVar2DhmKp\"   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` 
         * @summary Return all the authorization model IDs for a particular store
         * @param {number} [pageSize] 
         * @param {string} [continuationToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAuthorizationModels(pageSize?: number, continuationToken?: string, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<Auth0FgaReadAuthorizationModelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAuthorizationModels(pageSize, continuationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The GET settings API will return the store\'s settings, including environment tag and an array of Auth0 FGA\'s allowed 3rd party token issuers. The environment tag is used to differentiate between development, staging, and production environments.   Path parameter `store_id` is required. ## Example GET settings API\'s response looks like: ```json {   \"environment\":\"STAGING\",   \"token_issuers\":[     {       \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\",       \"issuer_url\":\"https://example.issuer.com\"     }   ] } ``` In the above response, the store is configured as STAGING and there is one allowed 3rd party token issuer `https://example.issuer.com`.
         * @summary Return store settings, including the environment tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readSettings(options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<SettingsSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The POST write API will update the tuples for a certain store.  Tuples and type definitions allow Auth0 FGA to determine whether a relationship exists between an object and an user. Path parameter `store_id` is required.  In the body, `writes` adds new tuples while `deletes` remove existing tuples.  `lock_tuple` is reserved for future use.  ## Limits - Each write API call allows at most **25** tuples. - Each store has a limit of **50000** tuples. - Each store has a limit of **1** write requests per second (RPS). ## Example ### Adding relationships To add `anne@auth0.com` as a `writer` for `document:2021-budget`, call write API with the following  ```json {   \"writes\": {     \"tuple_keys\": [       {         \"user\": \"anne@auth0.com\"         \"relation\": \"writer\",         \"object\": \"document:2021-budget\",       }     ]   } } ``` ### Removing relationships To remove `bob@auth0.com` as a `reader` for `document:2021-budget`, call write API with the following  ```json {   \"deletes\": {     \"tuple_keys\": [       {         \"user\": \"bob@auth0.com\"         \"relation\": \"reader\",         \"object\": \"document:2021-budget\",       }     ]   } } ``` 
         * @summary Add or delete tuples from the store
         * @param {Auth0FgaWriteRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async write(body: Auth0FgaWriteRequestParams, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.write(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The POST assertions API will add new assertions for an authorization model id, or overwrite the existing ones. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false. 
         * @summary Upsert assertions for an authorization model ID
         * @param {string} authorizationModelId The authorization model ID
         * @param {Auth0FgaWriteAssertionsRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async writeAssertions(authorizationModelId: string, body: Auth0FgaWriteAssertionsRequestParams, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.writeAssertions(authorizationModelId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The POST authorization-model API will update the authorization model for a certain store. Path parameter `store_id` and `type_definitions` array in the body are required.  Each item in the `type_definitions` array is a type definition as specified in the field `type_definition`. The response will return the authorization model\'s ID in the `id` field.  ## Limits - There can be at most **10** items in the type_definitions array. - Each store can have at most **10** authorization models. - Each store has a limit of **10** POST authorization-models requests per minute (RPM). ## Example To update the authorization model with a single `document` authorization model, call POST authorization-models API with the body:  ```json {   \"type_definitions\":[     {       \"type\":\"document\",       \"relations\":{         \"reader\":{           \"union\":{             \"child\":[               {                 \"this\":{                  }               },               {                 \"computedUserset\":{                   \"object\":\"\",                   \"relation\":\"writer\"                 }               }             ]           }         },         \"writer\":{           \"this\":{            }         }       }     }   ] } ``` Auth0 FGA\'s response will include the version id for this authorization model, which will look like  ``` {\"authorization_model_id\": \"1yunpF9DkzXMzm0dHrsCuWsooEV\"} ``` 
         * @summary Create a new authorization model
         * @param {AuthorizationmodelTypeDefinitions} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async writeAuthorizationModel(body: AuthorizationmodelTypeDefinitions, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<Auth0FgaWriteAuthorizationModelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.writeAuthorizationModel(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The PATCH settings API will update the environment tag to differentiate between development, staging, and production environments. Path parameter `store_id` is required. The response will return the updated environment tag as well as other configuration settings.  ## Example To update store\'s environment tag to `STAGING`, call PATCH settings API with the following with the body:  ```json {\"environment\": \"STAGING\"} ``` 
         * @summary Update the environment tag for a store
         * @param {Auth0FgaWriteSettingsRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async writeSettings(body: Auth0FgaWriteSettingsRequestParams, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<SettingsSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.writeSettings(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
        /**
         * The POST token-issuers API will configure system so that tokens issued by the specified 3rd party token issuer will be allowed for Auth0 FGA\'s read and write operations.  Otherwise, only tokens issued by Auth0 FGA\'s issuer (such as `auth0Fga.us.auth0.com` and `auth0Fga-dev.us.auth0.com`) are accepted by Auth0 FGA stores API.  Other tokens issued by providers external to Auth0 FGA will be rejected. An example use case is to have browsers directly calling Auth0 FGA API. Path parameter `store_id` as well as body parameter `issuer_url` are all required. ## Example To allow tokens issued by the 3rd party token issuer `https://example.issuer.com` for Auth0 FGA\'s read and write operations : 1. In the 3rd party issuer, configure Auth0 FGA API with the following audience (`https://api.staging.fga.dev`) in its issuer configuration. 2. Call POST token-issuers API with the body: `{\"issuer_url\": \"https://example.issuer.com\"}`  Auth0 FGA\'s response will include the id that is associated with the token issuer as well as the issuer url, and looks like  ```json {   \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\",   \"issuer_url\":\"https://example.issuer.com\" } ``` 
         * @summary Add 3rd party token issuer for Auth0 FGA read and write operations
         * @param {Auth0FgaWriteTokenIssuersRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async writeTokenIssuer(body: Auth0FgaWriteTokenIssuersRequestParams, options?: any): Promise<(axios?: AxiosInstance) => PromiseResult<SettingsTokenIssuer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.writeTokenIssuer(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, configuration);
        },
    }
};

/**
 * Auth0FgaApi - factory interface
 * @export
 */
export const Auth0FgaApiFactory = function (configuration: Configuration, axios?: AxiosInstance) {
    const localVarFp = Auth0FgaApiFp(configuration)
    return {
        /**
         * The check API will return whether the user has a certain relationship with an object in a certain store. Path parameter `store_id` as well as body parameter `object`, `relation` and `user` are all required. The response will return whether the relationship exists in the field `allowed`.  ## Limits - Each store has a limit of **50** check requests per second (RPS). ## Example In order to check if user `anne@auth0.com` has an owner relationship with object document:2021-budget, a check API call should be fired with the following body ```json {   \"tuple_key\": {     \"user\": \"anne@auth0.com\"     \"relation\": \"owner\"     \"object\": \"document:2021-budget\",   } } ``` Auth0 FGA\'s response will include `{ \"allowed\": true }` if there is a relationship and `{ \"allowed\": false }` if there isn\'t.
         * @summary Check whether a user is authorized to access an object
         * @param {Auth0FgaCheckRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check(body: Auth0FgaCheckRequestParams, options?: any): PromiseResult<Auth0FgaCheckResponse> {
            return localVarFp.check(body, options).then((request) => request(axios));
        },
        /**
         * The DELETE token-issuers API will remove the 3rd party token issuer as a token issuer that are allowed by Auth0 FGA.  The specified id is the id associated with the issuer url that is to be removed. Path parameter `store_id` and `id` are all required. ## Example To remove the 3rd party token issuer `https://example.issuer.com` (which has the id `0ujsszwN8NRY24YaXiTIE2VWDTS`), call DELETE token-issuers API with the path parameter id `0ujsszwN8NRY24YaXiTIE2VWDTS`.
         * @summary Remove 3rd party token issuer for Auth0 FGA read and write operation
         * @param {string} id Id of token issuer to be removed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTokenIssuer(id: string, options?: any): PromiseResult<object> {
            return localVarFp.deleteTokenIssuer(id, options).then((request) => request(axios));
        },
        /**
         * The expand API will return all users (including user and userset) that have certain relationship with an object in a certain store. This is different from the `/{store_id}/read` API in that both direct and indirect references are returned. Path parameter `store_id` as well as body parameter `object`, `relation` are all required. The response will return a userset tree whose leaves are the user id and usersets.  Union, intersection and difference operator are located in the intermediate nodes.  ## Limits - Each store has a limit of **30** expand requests per minute (RPM). ## Example Assume the following type definition for document: ```yaml   type document     relations       define reader as self or writer       define writer as self ``` In order to expand all users that have `reader` relationship with object `document:2021-budget`, an expand API call should be fired with the following body ```json {   \"tuple_key\": {     \"object\": \"document:2021-budget\",     \"relation\": \"reader\"   } } ``` Auth0 FGA\'s response will be a userset tree of the users and computed usersets that have read access to the document. ```json {   \"tree\":{     \"root\":{       \"type\":\"document:2021-budget#reader\",       \"union\":{         \"nodes\":[           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"users\":{                 \"users\":[                   \"bob@auth0.com\"                 ]               }             }           },           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"computed\":{                 \"userset\":\"document:2021-budget#writer\"               }             }           }         ]       }     }   } } ``` The caller can then call expand API for the `writer` relationship for the `document:2021-budget`.
         * @summary Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship
         * @param {Auth0FgaExpandRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expand(body: Auth0FgaExpandRequestParams, options?: any): PromiseResult<Auth0FgaExpandResponse> {
            return localVarFp.expand(body, options).then((request) => request(axios));
        },
        /**
         * The POST read API will return the tuples for a certain store that matches a query filter specified in the body. Tuples and type definitions allow Auth0 FGA to determine whether a relationship exists between an object and an user. It is different from the `/{store_id}/expand` API in that only direct relationships are returned. Path parameter `store_id` is required.  In the body: 1. Object is mandatory. An object can be a full object (e.g., `type:object_id`) or type only (e.g., `type:`). 2. User is mandatory in the case the object is type only. ## Limits - Each store has a limit of **2** read requests per second (RPS). ## Examples ### Query for all objects in a type definition To query for all objects that `bob@auth0.com` has `reader` relationship in the document type definition, call read API with body of  ```json {  \"tuple_key\": {      \"user\": \"bob@auth0.com\"      \"relation\": \"reader\",      \"object\": \"document:\",   } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"bob@auth0.com\"         \"relation\": \"reader\",         \"object\": \"document:2021-budget\",       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ] } ``` This means that `bob@auth0.com` has a `reader` relationship with 1 document `document:2021-budget`. ### Query for all users with particular relationships for a particular document To query for all users that have `reader` relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {      \"object\": \"document:2021-budget\",      \"relation\": \"reader\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"bob@auth0.com\"         \"relation\": \"reader\",         \"object\": \"document:2021-budget\",       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ] } ``` This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`).  Note that the API will not return writers such as `anne@auth0.com` even when all writers are readers.  This is because only direct relationship are returned for the READ API. ### Query for all users with all relationships for a particular document To query for all users that have any relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {       \"object\": \"document:2021-budget\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"anne@auth0.com\"         \"relation\": \"writer\",         \"object\": \"document:2021-budget\",       },       \"timestamp\": \"2021-10-05T13:42:12.356Z\"     },     {       \"key\": {         \"user\": \"bob@auth0.com\"         \"relation\": \"reader\",         \"object\": \"document:2021-budget\",       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ] } ``` This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`) and 1 `writer` (`anne@auth0.com`). 
         * @summary Get tuples from the store that matches a query, without following userset rewrite rules
         * @param {Auth0FgaReadRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        read(body: Auth0FgaReadRequestParams, options?: any): PromiseResult<Auth0FgaReadResponse> {
            return localVarFp.read(body, options).then((request) => request(axios));
        },
        /**
         * The GET assertions API will return, for a given authorization model id, all the assertions stored for it. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false. 
         * @summary Read assertions for an authorization model ID
         * @param {string} authorizationModelId The authorization model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAssertions(authorizationModelId: string, options?: any): PromiseResult<Auth0FgaReadAssertionsResponse> {
            return localVarFp.readAssertions(authorizationModelId, options).then((request) => request(axios));
        },
        /**
         * The GET authorization-models by ID API will return a particular version of authorization model that had been configured for a certain store.   Path parameter `store_id` and `id` are required. The response will return the authorization model for the particular version.  ## Limits - Each store has a limit of **30** read authorization-models requests per minute (RPM). ## Example To retrieve the authorization model with ID `1yunpF9DkzXMzm0dHrsCuWsooEV` for the store, call the GET authorization-models by ID API with `1yunpF9DkzXMzm0dHrsCuWsooEV` as the `id` path parameter.  The API will return: ```json {   \"authorization_model\":{     \"id\":\"1yunpF9DkzXMzm0dHrsCuWsooEV\",     \"type_definitions\":[       {         \"type\":\"document\",         \"relations\":{           \"reader\":{             \"union\":{               \"child\":[                 {                   \"this\":{}                 },                 {                   \"computedUserset\":{                     \"object\":\"\",                     \"relation\":\"writer\"                   }                 }               ]             }           },           \"writer\":{             \"this\":{}           }         }       }     ]   } } ``` In the above example, there is only 1 type (`document`) with 2 relations (`writer` and `reader`).
         * @summary Return a particular version of an authorization model
         * @param {string} id The authorization model ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAuthorizationModel(id: string, options?: any): PromiseResult<Auth0FgaReadAuthorizationModelResponse> {
            return localVarFp.readAuthorizationModel(id, options).then((request) => request(axios));
        },
        /**
         * The GET authorization-models API will return all the IDs of the authorization models for a certain store. Path parameter `store_id` is required. Auth0 FGA\'s response will contain an array of all authorization model IDs, sorted in descending order of creation.  ## Limits - Each store has a limit of **30** read authorization-models requests per minute (RPM). - Each response can contain up to **50** authorization model IDs. ## Example Assume that the store\'s authorization model has been configured twice.  To get all the IDs of the authorization models that had been created in this store, call GET authorization-models.  The API will return a response that looks like: ```json {   \"authorization_model_ids\": [       \"1yunpF9DkzXMzm0dHrsCuWsooEV\",       \"1yundoHpJHlodgn4EOVar2DhmKp\"   ] } ``` If there are more authorization model IDs available, the response will contain an extra field `continuation_token`: ```json {   \"authorization_model_ids\": [       \"1yunpF9DkzXMzm0dHrsCuWsooEV\",       \"1yundoHpJHlodgn4EOVar2DhmKp\"   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` 
         * @summary Return all the authorization model IDs for a particular store
         * @param {number} [pageSize] 
         * @param {string} [continuationToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAuthorizationModels(pageSize?: number, continuationToken?: string, options?: any): PromiseResult<Auth0FgaReadAuthorizationModelsResponse> {
            return localVarFp.readAuthorizationModels(pageSize, continuationToken, options).then((request) => request(axios));
        },
        /**
         * The GET settings API will return the store\'s settings, including environment tag and an array of Auth0 FGA\'s allowed 3rd party token issuers. The environment tag is used to differentiate between development, staging, and production environments.   Path parameter `store_id` is required. ## Example GET settings API\'s response looks like: ```json {   \"environment\":\"STAGING\",   \"token_issuers\":[     {       \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\",       \"issuer_url\":\"https://example.issuer.com\"     }   ] } ``` In the above response, the store is configured as STAGING and there is one allowed 3rd party token issuer `https://example.issuer.com`.
         * @summary Return store settings, including the environment tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readSettings(options?: any): PromiseResult<SettingsSettings> {
            return localVarFp.readSettings(options).then((request) => request(axios));
        },
        /**
         * The POST write API will update the tuples for a certain store.  Tuples and type definitions allow Auth0 FGA to determine whether a relationship exists between an object and an user. Path parameter `store_id` is required.  In the body, `writes` adds new tuples while `deletes` remove existing tuples.  `lock_tuple` is reserved for future use.  ## Limits - Each write API call allows at most **25** tuples. - Each store has a limit of **50000** tuples. - Each store has a limit of **1** write requests per second (RPS). ## Example ### Adding relationships To add `anne@auth0.com` as a `writer` for `document:2021-budget`, call write API with the following  ```json {   \"writes\": {     \"tuple_keys\": [       {         \"user\": \"anne@auth0.com\"         \"relation\": \"writer\",         \"object\": \"document:2021-budget\",       }     ]   } } ``` ### Removing relationships To remove `bob@auth0.com` as a `reader` for `document:2021-budget`, call write API with the following  ```json {   \"deletes\": {     \"tuple_keys\": [       {         \"user\": \"bob@auth0.com\"         \"relation\": \"reader\",         \"object\": \"document:2021-budget\",       }     ]   } } ``` 
         * @summary Add or delete tuples from the store
         * @param {Auth0FgaWriteRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        write(body: Auth0FgaWriteRequestParams, options?: any): PromiseResult<object> {
            return localVarFp.write(body, options).then((request) => request(axios));
        },
        /**
         * The POST assertions API will add new assertions for an authorization model id, or overwrite the existing ones. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false. 
         * @summary Upsert assertions for an authorization model ID
         * @param {string} authorizationModelId The authorization model ID
         * @param {Auth0FgaWriteAssertionsRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeAssertions(authorizationModelId: string, body: Auth0FgaWriteAssertionsRequestParams, options?: any): PromiseResult<object> {
            return localVarFp.writeAssertions(authorizationModelId, body, options).then((request) => request(axios));
        },
        /**
         * The POST authorization-model API will update the authorization model for a certain store. Path parameter `store_id` and `type_definitions` array in the body are required.  Each item in the `type_definitions` array is a type definition as specified in the field `type_definition`. The response will return the authorization model\'s ID in the `id` field.  ## Limits - There can be at most **10** items in the type_definitions array. - Each store can have at most **10** authorization models. - Each store has a limit of **10** POST authorization-models requests per minute (RPM). ## Example To update the authorization model with a single `document` authorization model, call POST authorization-models API with the body:  ```json {   \"type_definitions\":[     {       \"type\":\"document\",       \"relations\":{         \"reader\":{           \"union\":{             \"child\":[               {                 \"this\":{                  }               },               {                 \"computedUserset\":{                   \"object\":\"\",                   \"relation\":\"writer\"                 }               }             ]           }         },         \"writer\":{           \"this\":{            }         }       }     }   ] } ``` Auth0 FGA\'s response will include the version id for this authorization model, which will look like  ``` {\"authorization_model_id\": \"1yunpF9DkzXMzm0dHrsCuWsooEV\"} ``` 
         * @summary Create a new authorization model
         * @param {AuthorizationmodelTypeDefinitions} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeAuthorizationModel(body: AuthorizationmodelTypeDefinitions, options?: any): PromiseResult<Auth0FgaWriteAuthorizationModelResponse> {
            return localVarFp.writeAuthorizationModel(body, options).then((request) => request(axios));
        },
        /**
         * The PATCH settings API will update the environment tag to differentiate between development, staging, and production environments. Path parameter `store_id` is required. The response will return the updated environment tag as well as other configuration settings.  ## Example To update store\'s environment tag to `STAGING`, call PATCH settings API with the following with the body:  ```json {\"environment\": \"STAGING\"} ``` 
         * @summary Update the environment tag for a store
         * @param {Auth0FgaWriteSettingsRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeSettings(body: Auth0FgaWriteSettingsRequestParams, options?: any): PromiseResult<SettingsSettings> {
            return localVarFp.writeSettings(body, options).then((request) => request(axios));
        },
        /**
         * The POST token-issuers API will configure system so that tokens issued by the specified 3rd party token issuer will be allowed for Auth0 FGA\'s read and write operations.  Otherwise, only tokens issued by Auth0 FGA\'s issuer (such as `auth0Fga.us.auth0.com` and `auth0Fga-dev.us.auth0.com`) are accepted by Auth0 FGA stores API.  Other tokens issued by providers external to Auth0 FGA will be rejected. An example use case is to have browsers directly calling Auth0 FGA API. Path parameter `store_id` as well as body parameter `issuer_url` are all required. ## Example To allow tokens issued by the 3rd party token issuer `https://example.issuer.com` for Auth0 FGA\'s read and write operations : 1. In the 3rd party issuer, configure Auth0 FGA API with the following audience (`https://api.staging.fga.dev`) in its issuer configuration. 2. Call POST token-issuers API with the body: `{\"issuer_url\": \"https://example.issuer.com\"}`  Auth0 FGA\'s response will include the id that is associated with the token issuer as well as the issuer url, and looks like  ```json {   \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\",   \"issuer_url\":\"https://example.issuer.com\" } ``` 
         * @summary Add 3rd party token issuer for Auth0 FGA read and write operations
         * @param {Auth0FgaWriteTokenIssuersRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeTokenIssuer(body: Auth0FgaWriteTokenIssuersRequestParams, options?: any): PromiseResult<SettingsTokenIssuer> {
            return localVarFp.writeTokenIssuer(body, options).then((request) => request(axios));
        },
    };
};

/**
 * Auth0FgaApi - object-oriented interface
 * @export
 * @class Auth0FgaApi
 * @extends {BaseAPI}
 */
export class Auth0FgaApi extends BaseAPI {
    /**
     * The check API will return whether the user has a certain relationship with an object in a certain store. Path parameter `store_id` as well as body parameter `object`, `relation` and `user` are all required. The response will return whether the relationship exists in the field `allowed`.  ## Limits - Each store has a limit of **50** check requests per second (RPS). ## Example In order to check if user `anne@auth0.com` has an owner relationship with object document:2021-budget, a check API call should be fired with the following body ```json {   \"tuple_key\": {     \"user\": \"anne@auth0.com\"     \"relation\": \"owner\"     \"object\": \"document:2021-budget\",   } } ``` Auth0 FGA\'s response will include `{ \"allowed\": true }` if there is a relationship and `{ \"allowed\": false }` if there isn\'t.
     * @summary Check whether a user is authorized to access an object
     * @param {Auth0FgaCheckRequestParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Auth0FgaApi
     */
    public check(body: Auth0FgaCheckRequestParams, options?: any) {
        return Auth0FgaApiFp(this.configuration).check(body, options).then((request) => request(this.axios));
    }

    /**
     * The DELETE token-issuers API will remove the 3rd party token issuer as a token issuer that are allowed by Auth0 FGA.  The specified id is the id associated with the issuer url that is to be removed. Path parameter `store_id` and `id` are all required. ## Example To remove the 3rd party token issuer `https://example.issuer.com` (which has the id `0ujsszwN8NRY24YaXiTIE2VWDTS`), call DELETE token-issuers API with the path parameter id `0ujsszwN8NRY24YaXiTIE2VWDTS`.
     * @summary Remove 3rd party token issuer for Auth0 FGA read and write operation
     * @param {string} id Id of token issuer to be removed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Auth0FgaApi
     */
    public deleteTokenIssuer(id: string, options?: any) {
        return Auth0FgaApiFp(this.configuration).deleteTokenIssuer(id, options).then((request) => request(this.axios));
    }

    /**
     * The expand API will return all users (including user and userset) that have certain relationship with an object in a certain store. This is different from the `/{store_id}/read` API in that both direct and indirect references are returned. Path parameter `store_id` as well as body parameter `object`, `relation` are all required. The response will return a userset tree whose leaves are the user id and usersets.  Union, intersection and difference operator are located in the intermediate nodes.  ## Limits - Each store has a limit of **30** expand requests per minute (RPM). ## Example Assume the following type definition for document: ```yaml   type document     relations       define reader as self or writer       define writer as self ``` In order to expand all users that have `reader` relationship with object `document:2021-budget`, an expand API call should be fired with the following body ```json {   \"tuple_key\": {     \"object\": \"document:2021-budget\",     \"relation\": \"reader\"   } } ``` Auth0 FGA\'s response will be a userset tree of the users and computed usersets that have read access to the document. ```json {   \"tree\":{     \"root\":{       \"type\":\"document:2021-budget#reader\",       \"union\":{         \"nodes\":[           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"users\":{                 \"users\":[                   \"bob@auth0.com\"                 ]               }             }           },           {             \"type\":\"document:2021-budget#reader\",             \"leaf\":{               \"computed\":{                 \"userset\":\"document:2021-budget#writer\"               }             }           }         ]       }     }   } } ``` The caller can then call expand API for the `writer` relationship for the `document:2021-budget`.
     * @summary Expand all relationships in userset tree format, and following userset rewrite rules.  Useful to reason about and debug a certain relationship
     * @param {Auth0FgaExpandRequestParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Auth0FgaApi
     */
    public expand(body: Auth0FgaExpandRequestParams, options?: any) {
        return Auth0FgaApiFp(this.configuration).expand(body, options).then((request) => request(this.axios));
    }

    /**
     * The POST read API will return the tuples for a certain store that matches a query filter specified in the body. Tuples and type definitions allow Auth0 FGA to determine whether a relationship exists between an object and an user. It is different from the `/{store_id}/expand` API in that only direct relationships are returned. Path parameter `store_id` is required.  In the body: 1. Object is mandatory. An object can be a full object (e.g., `type:object_id`) or type only (e.g., `type:`). 2. User is mandatory in the case the object is type only. ## Limits - Each store has a limit of **2** read requests per second (RPS). ## Examples ### Query for all objects in a type definition To query for all objects that `bob@auth0.com` has `reader` relationship in the document type definition, call read API with body of  ```json {  \"tuple_key\": {      \"user\": \"bob@auth0.com\"      \"relation\": \"reader\",      \"object\": \"document:\",   } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"bob@auth0.com\"         \"relation\": \"reader\",         \"object\": \"document:2021-budget\",       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ] } ``` This means that `bob@auth0.com` has a `reader` relationship with 1 document `document:2021-budget`. ### Query for all users with particular relationships for a particular document To query for all users that have `reader` relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {      \"object\": \"document:2021-budget\",      \"relation\": \"reader\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"bob@auth0.com\"         \"relation\": \"reader\",         \"object\": \"document:2021-budget\",       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ] } ``` This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`).  Note that the API will not return writers such as `anne@auth0.com` even when all writers are readers.  This is because only direct relationship are returned for the READ API. ### Query for all users with all relationships for a particular document To query for all users that have any relationship with `document:2021-budget`, call read API with body of  ```json {   \"tuple_key\": {       \"object\": \"document:2021-budget\"    } } ``` The API will return something like  ```json {   \"tuples\": [     {       \"key\": {         \"user\": \"anne@auth0.com\"         \"relation\": \"writer\",         \"object\": \"document:2021-budget\",       },       \"timestamp\": \"2021-10-05T13:42:12.356Z\"     },     {       \"key\": {         \"user\": \"bob@auth0.com\"         \"relation\": \"reader\",         \"object\": \"document:2021-budget\",       },       \"timestamp\": \"2021-10-06T15:32:11.128Z\"     }   ] } ``` This means that `document:2021-budget` has 1 `reader` (`bob@auth0.com`) and 1 `writer` (`anne@auth0.com`). 
     * @summary Get tuples from the store that matches a query, without following userset rewrite rules
     * @param {Auth0FgaReadRequestParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Auth0FgaApi
     */
    public read(body: Auth0FgaReadRequestParams, options?: any) {
        return Auth0FgaApiFp(this.configuration).read(body, options).then((request) => request(this.axios));
    }

    /**
     * The GET assertions API will return, for a given authorization model id, all the assertions stored for it. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false. 
     * @summary Read assertions for an authorization model ID
     * @param {string} authorizationModelId The authorization model ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Auth0FgaApi
     */
    public readAssertions(authorizationModelId: string, options?: any) {
        return Auth0FgaApiFp(this.configuration).readAssertions(authorizationModelId, options).then((request) => request(this.axios));
    }

    /**
     * The GET authorization-models by ID API will return a particular version of authorization model that had been configured for a certain store.   Path parameter `store_id` and `id` are required. The response will return the authorization model for the particular version.  ## Limits - Each store has a limit of **30** read authorization-models requests per minute (RPM). ## Example To retrieve the authorization model with ID `1yunpF9DkzXMzm0dHrsCuWsooEV` for the store, call the GET authorization-models by ID API with `1yunpF9DkzXMzm0dHrsCuWsooEV` as the `id` path parameter.  The API will return: ```json {   \"authorization_model\":{     \"id\":\"1yunpF9DkzXMzm0dHrsCuWsooEV\",     \"type_definitions\":[       {         \"type\":\"document\",         \"relations\":{           \"reader\":{             \"union\":{               \"child\":[                 {                   \"this\":{}                 },                 {                   \"computedUserset\":{                     \"object\":\"\",                     \"relation\":\"writer\"                   }                 }               ]             }           },           \"writer\":{             \"this\":{}           }         }       }     ]   } } ``` In the above example, there is only 1 type (`document`) with 2 relations (`writer` and `reader`).
     * @summary Return a particular version of an authorization model
     * @param {string} id The authorization model ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Auth0FgaApi
     */
    public readAuthorizationModel(id: string, options?: any) {
        return Auth0FgaApiFp(this.configuration).readAuthorizationModel(id, options).then((request) => request(this.axios));
    }

    /**
     * The GET authorization-models API will return all the IDs of the authorization models for a certain store. Path parameter `store_id` is required. Auth0 FGA\'s response will contain an array of all authorization model IDs, sorted in descending order of creation.  ## Limits - Each store has a limit of **30** read authorization-models requests per minute (RPM). - Each response can contain up to **50** authorization model IDs. ## Example Assume that the store\'s authorization model has been configured twice.  To get all the IDs of the authorization models that had been created in this store, call GET authorization-models.  The API will return a response that looks like: ```json {   \"authorization_model_ids\": [       \"1yunpF9DkzXMzm0dHrsCuWsooEV\",       \"1yundoHpJHlodgn4EOVar2DhmKp\"   ] } ``` If there are more authorization model IDs available, the response will contain an extra field `continuation_token`: ```json {   \"authorization_model_ids\": [       \"1yunpF9DkzXMzm0dHrsCuWsooEV\",       \"1yundoHpJHlodgn4EOVar2DhmKp\"   ],   \"continuation_token\": \"eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==\" } ``` 
     * @summary Return all the authorization model IDs for a particular store
     * @param {number} [pageSize] 
     * @param {string} [continuationToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Auth0FgaApi
     */
    public readAuthorizationModels(pageSize?: number, continuationToken?: string, options?: any) {
        return Auth0FgaApiFp(this.configuration).readAuthorizationModels(pageSize, continuationToken, options).then((request) => request(this.axios));
    }

    /**
     * The GET settings API will return the store\'s settings, including environment tag and an array of Auth0 FGA\'s allowed 3rd party token issuers. The environment tag is used to differentiate between development, staging, and production environments.   Path parameter `store_id` is required. ## Example GET settings API\'s response looks like: ```json {   \"environment\":\"STAGING\",   \"token_issuers\":[     {       \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\",       \"issuer_url\":\"https://example.issuer.com\"     }   ] } ``` In the above response, the store is configured as STAGING and there is one allowed 3rd party token issuer `https://example.issuer.com`.
     * @summary Return store settings, including the environment tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Auth0FgaApi
     */
    public readSettings(options?: any) {
        return Auth0FgaApiFp(this.configuration).readSettings(options).then((request) => request(this.axios));
    }

    /**
     * The POST write API will update the tuples for a certain store.  Tuples and type definitions allow Auth0 FGA to determine whether a relationship exists between an object and an user. Path parameter `store_id` is required.  In the body, `writes` adds new tuples while `deletes` remove existing tuples.  `lock_tuple` is reserved for future use.  ## Limits - Each write API call allows at most **25** tuples. - Each store has a limit of **50000** tuples. - Each store has a limit of **1** write requests per second (RPS). ## Example ### Adding relationships To add `anne@auth0.com` as a `writer` for `document:2021-budget`, call write API with the following  ```json {   \"writes\": {     \"tuple_keys\": [       {         \"user\": \"anne@auth0.com\"         \"relation\": \"writer\",         \"object\": \"document:2021-budget\",       }     ]   } } ``` ### Removing relationships To remove `bob@auth0.com` as a `reader` for `document:2021-budget`, call write API with the following  ```json {   \"deletes\": {     \"tuple_keys\": [       {         \"user\": \"bob@auth0.com\"         \"relation\": \"reader\",         \"object\": \"document:2021-budget\",       }     ]   } } ``` 
     * @summary Add or delete tuples from the store
     * @param {Auth0FgaWriteRequestParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Auth0FgaApi
     */
    public write(body: Auth0FgaWriteRequestParams, options?: any) {
        return Auth0FgaApiFp(this.configuration).write(body, options).then((request) => request(this.axios));
    }

    /**
     * The POST assertions API will add new assertions for an authorization model id, or overwrite the existing ones. An assertion is an object that contains a tuple key, and the expectation of whether a call to the Check API of that tuple key will return true or false. 
     * @summary Upsert assertions for an authorization model ID
     * @param {string} authorizationModelId The authorization model ID
     * @param {Auth0FgaWriteAssertionsRequestParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Auth0FgaApi
     */
    public writeAssertions(authorizationModelId: string, body: Auth0FgaWriteAssertionsRequestParams, options?: any) {
        return Auth0FgaApiFp(this.configuration).writeAssertions(authorizationModelId, body, options).then((request) => request(this.axios));
    }

    /**
     * The POST authorization-model API will update the authorization model for a certain store. Path parameter `store_id` and `type_definitions` array in the body are required.  Each item in the `type_definitions` array is a type definition as specified in the field `type_definition`. The response will return the authorization model\'s ID in the `id` field.  ## Limits - There can be at most **10** items in the type_definitions array. - Each store can have at most **10** authorization models. - Each store has a limit of **10** POST authorization-models requests per minute (RPM). ## Example To update the authorization model with a single `document` authorization model, call POST authorization-models API with the body:  ```json {   \"type_definitions\":[     {       \"type\":\"document\",       \"relations\":{         \"reader\":{           \"union\":{             \"child\":[               {                 \"this\":{                  }               },               {                 \"computedUserset\":{                   \"object\":\"\",                   \"relation\":\"writer\"                 }               }             ]           }         },         \"writer\":{           \"this\":{            }         }       }     }   ] } ``` Auth0 FGA\'s response will include the version id for this authorization model, which will look like  ``` {\"authorization_model_id\": \"1yunpF9DkzXMzm0dHrsCuWsooEV\"} ``` 
     * @summary Create a new authorization model
     * @param {AuthorizationmodelTypeDefinitions} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Auth0FgaApi
     */
    public writeAuthorizationModel(body: AuthorizationmodelTypeDefinitions, options?: any) {
        return Auth0FgaApiFp(this.configuration).writeAuthorizationModel(body, options).then((request) => request(this.axios));
    }

    /**
     * The PATCH settings API will update the environment tag to differentiate between development, staging, and production environments. Path parameter `store_id` is required. The response will return the updated environment tag as well as other configuration settings.  ## Example To update store\'s environment tag to `STAGING`, call PATCH settings API with the following with the body:  ```json {\"environment\": \"STAGING\"} ``` 
     * @summary Update the environment tag for a store
     * @param {Auth0FgaWriteSettingsRequestParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Auth0FgaApi
     */
    public writeSettings(body: Auth0FgaWriteSettingsRequestParams, options?: any) {
        return Auth0FgaApiFp(this.configuration).writeSettings(body, options).then((request) => request(this.axios));
    }

    /**
     * The POST token-issuers API will configure system so that tokens issued by the specified 3rd party token issuer will be allowed for Auth0 FGA\'s read and write operations.  Otherwise, only tokens issued by Auth0 FGA\'s issuer (such as `auth0Fga.us.auth0.com` and `auth0Fga-dev.us.auth0.com`) are accepted by Auth0 FGA stores API.  Other tokens issued by providers external to Auth0 FGA will be rejected. An example use case is to have browsers directly calling Auth0 FGA API. Path parameter `store_id` as well as body parameter `issuer_url` are all required. ## Example To allow tokens issued by the 3rd party token issuer `https://example.issuer.com` for Auth0 FGA\'s read and write operations : 1. In the 3rd party issuer, configure Auth0 FGA API with the following audience (`https://api.staging.fga.dev`) in its issuer configuration. 2. Call POST token-issuers API with the body: `{\"issuer_url\": \"https://example.issuer.com\"}`  Auth0 FGA\'s response will include the id that is associated with the token issuer as well as the issuer url, and looks like  ```json {   \"id\":\"0ujsszwN8NRY24YaXiTIE2VWDTS\",   \"issuer_url\":\"https://example.issuer.com\" } ``` 
     * @summary Add 3rd party token issuer for Auth0 FGA read and write operations
     * @param {Auth0FgaWriteTokenIssuersRequestParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Auth0FgaApi
     */
    public writeTokenIssuer(body: Auth0FgaWriteTokenIssuersRequestParams, options?: any) {
        return Auth0FgaApiFp(this.configuration).writeTokenIssuer(body, options).then((request) => request(this.axios));
    }
}


